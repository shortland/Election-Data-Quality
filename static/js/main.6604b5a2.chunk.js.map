{"version":3,"sources":["data/ny_county_shoreline.geojson","data/states_tooltip_data.geojson","data/ny_precincts.geojson","layers/CountyLayer.js","layers/StateLayer.js","layers/PrecinctLayer.js","components/map-components/pins.js","components/map-components/error-info.js","components/StateSelector.js","components/ElectionDisplayBar.js","components/DemographicsTable.js","components/DataCorrectionPage.js","components/Comments.js","components/CommentModal.js","components/LeftSidebar.js","toolbar.js","components/UserModeSelector.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","countyDataLayerFillable","id","type","paint","countyDataLayerFillableHighlight","source","countyDataLayerOutline","stateLayerFill","precinctLayerFill","precinctLayerFillHighlight","precinctLayerOutline","Pins","this","props","data","onClick","shouldShowPins","console","log","map","city","index","key","longitude","latitude","height","viewBox","style","cursor","fill","stroke","transform","d","PureComponent","ErrorInfo","info","textAlign","from","StateSelector","Dropdown","Toggle","variant","Menu","Item","href","select_state","Component","ElectionDisplayBar","state","election","electionResults","year","clinton","Math","random","trump","round","setState","keys","Object","ButtonGroup","size","className","Button","changeElection","bind","width","DemographicsTable","Table","striped","bordered","hover","colSpan","DataCorrectionPage","dismiss","data_correction_page_status","Form","Group","controlId","Label","Control","as","placeholder","save_changes","Comments","comments","get_comments","prevProps","savedCommentData","get_saved_comments","new_comments","push","numComments","ceil","commenter","content","i","comment","displayed_comments","Card","Body","CommentModal","show","display","user","text","comment_data","handle_modal_display","Modal","onHide","Header","closeButton","Title","Footer","saveCommentData","document","getElementById","value","LeftSidebar","createList","list","feature","selected","properties","p","get_data_correction_page_status","page_status","mode","get_comments_modal_data","comment_modal_data","_handleClick","event","showErrorPins","undefined","length","trigger","open","MODES","EditorModes","SELECT","icon","DRAW_POINT","DRAW_PATH","DRAW_POLYGON","DRAW_RECTANGLE","Container","styled","div","Row","hovered","Img","img","Tooltip","Delete","Toolbar","_onHover","evt","hoveredId","target","_onDelete","onDelete","deleting","setTimeout","_onSaveChange","features","toolBarRequest","selectedMode","m","onSwitchMode","onMouseOver","onMouseOut","_","src","UserModeSelector","userModeSelect","MAPBOX_API","App","mapRef","React","createRef","handleViewportChange","viewport","handleGeocoderViewportChange","transitionDuration","handleOnResult","result","searchResultLayer","GeoJsonLayer","geometry","getFillColor","getRadius","pointRadiusMinPixels","pointRadiusMaxPixels","selectedFeatureIndex","toast","position","POSITION","BOTTOM_RIGHT","splice","READ_ONLY","_editorRef","deleteFeatures","_switchMode","_onSelect","_onUpdate","_onSaveRequest","selected_saved_feature","_renderToolbar","userMode","onSelect","selectedFeatureId","_onClick","stateFeature","find","f","layer","selectedFeature","name","_zoomToFeature","countyFeature","NAME","precinctFeature","srcEvent","offsetX","offsetY","stateHovered","x","y","countyHovered","filter","precinctHovered","GEOID10","_onClickError","error_data","popupInfo","zoom","countyData","countyDataOutline","stateData","hoveredFeature","precinctData","window","innerHeight","json","STATES_TOOLTIP_DATA","error","response","NY_COUNTY_SHORELINE_DATA","NY_PRECINCT_DATA","bbox","minLng","minLat","maxLng","maxLat","WebMercatorViewport","fitBounds","padding","transitionInterpolator","LinearInterpolator","around","offsetCenter","countyHoveredFeature","left","top","amount_counties","FIPS_CODE","tipSize","anchor","closeOnClick","onClose","Navbar","bg","expand","Brand","aria-controls","Collapse","Nav","state_abv","stateSelect","onViewportChange","mapStyle","mapboxApiAccessToken","onHover","doubleClickZoom","ref","clickRadius","onUpdate","onResult","minzoom","maxzoom","_renderTooltip","ERRORS","_renderErrorPopup","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6604b5a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ny_county_shoreline.b5f895d3.geojson\";","module.exports = __webpack_public_path__ + \"static/media/states_tooltip_data.1c2d3362.geojson\";","module.exports = __webpack_public_path__ + \"static/media/ny_precincts.2736e231.geojson\";","export const countyDataLayerFillable = {\n    id: 'countyFill',\n    type: 'fill',\n    paint: {\n        'fill-color': 'rgba(0, 0, 0, 0.0)',\n    },\n};\n\nexport const countyDataLayerFillableHighlight = {\n    id: 'countyFillHighlighted',\n    type: 'fill',\n    source: 'countyFill',\n    paint: {\n        'fill-color': 'rgba(66, 135, 245, 0.5)',\n    },\n};\n\nexport const countyDataLayerOutline = {\n    id: 'countyDataOutline',\n    type: 'line',\n    paint: {\n        'line-color': '#000000',\n        'line-width': 2,\n    },\n};","export const stateLayerFill = {\n    id: 'stateFill',\n    type: 'fill',\n    paint: {\n        'fill-color': 'rgba(66, 135, 245, 0.5)',\n    },\n};","export const precinctLayerFill = {\n    id: 'precinctFill',\n    type: 'fill',\n    paint: {\n        'fill-color': 'rgba(0, 0, 0, 0.0)',\n    },\n};\n\nexport const precinctLayerFillHighlight = {\n    id: 'precinctFillHighlighted',\n    type: 'fill',\n    source: 'precinctFill',\n    paint: {\n        'fill-color': 'rgba(66, 135, 245, 0.5)',\n    },\n};\n\nexport const precinctLayerOutline = {\n    id: 'precinctOutline',\n    type: 'line',\n    paint: {\n        'line-color': 'rgba(66, 135, 245, 1.0)',\n        'line-width': 1,\n    },\n};","import React, { PureComponent } from 'react';\nimport { Marker } from 'react-map-gl';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst SIZE = 20;\n\n// Important for perf: the markers never change, avoid rerender when the map viewport changes\nexport default class Pins extends PureComponent {\n\n    render() {\n        const { data, onClick, shouldShowPins } = this.props;\n        console.log(shouldShowPins);\n        if (shouldShowPins) {\n            console.log(\"should show pins\");\n            return data.map((city, index) => (\n                <Marker key={`marker-${index}`} longitude={city.longitude} latitude={city.latitude}>\n                    <svg\n                        height={SIZE}\n                        viewBox=\"0 0 24 24\"\n                        style={{\n                            cursor: 'pointer',\n                            fill: '#d00',\n                            stroke: 'none',\n                            transform: `translate(${-SIZE / 2}px,${-SIZE}px)`\n                        }}\n                        onClick={() => onClick(city)}\n                    >\n                        <path d={ICON} />\n                    </svg>\n                </Marker>\n            ));\n        } else {\n            return (<span></span>);\n        }\n\n    }\n}","import React, { PureComponent } from 'react';\n\nexport default class ErrorInfo extends PureComponent {\n    render() {\n        const { info } = this.props;\n\n        return (\n            <div>\n                <h3>Map Error</h3>\n                <br />\n                <p style={{ textAlign: 'left' }}>\n                    Type: {info.type}\n                    <br />\n                    Source: {info.from}\n                </p>\n            </div >\n        );\n    }\n}","import React, {Component} from 'react';\n\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nclass StateSelector extends Component{\n\n    render(){\n        return(\n            <Dropdown>\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                    Select State\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu>\n                    <Dropdown.Item href=\"#/NewYork\" onClick={this.props.select_state(\"NY\")}>New York</Dropdown.Item>\n                    <Dropdown.Item href=\"#/Utah\" onClick={this.props.select_state(\"UT\")}>Utah</Dropdown.Item>\n                    <Dropdown.Item href=\"#/Wisconsin\" onClick={this.props.select_state(\"WI\")}>Wisconsin</Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        );\n    }\n}\n\nexport default StateSelector;","import React, { Component } from 'react';\n\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\n\n\nclass ElectionDisplayBar extends Component {\n    constructor(props) {\n        super(props);\n        //this.electionResults = { \"Clinton\": 60, \"Trump\": 40, \"Other\": 5 };\n        this.state = {\n            election: 2016,\n            electionResults: { \"Dem\": 60, \"Rep\": 40, \"Other\": 5 }\n        }\n    }\n\n    changeElection(year) {\n        let clinton = Math.random() * 100;\n        clinton = Math.round(clinton);\n        let trump = 100 - clinton;\n        this.setState({ election: year, electionResults: { \"Dem\": clinton, \"Rep\": trump } });\n    }\n\n    render() {\n        const { electionResults } = this.state;\n\n        let keys = Object.keys(electionResults);\n        //let values = Object.values(electionResults);\n\n        if (electionResults) {\n\n            return (\n                <div>\n                    <ButtonGroup size=\"sm\" className=\"mt-3\">\n                        <Button variant=\"outline-primary\" id=\"btn1\" className=\"button\" onClick={this.changeElection.bind(this, 2016)}>2016</Button>\n                        {/* <Button variant=\"outline-primary\" id=\"btn2\" className=\"button\" onClick={this.changeElection.bind(this, 2012)}>2016</Button> */}\n                        <Button variant=\"outline-primary\" id=\"btn3\" className=\"button\" onClick={this.changeElection.bind(this, 2008)}>2018</Button>\n                    </ButtonGroup>\n                    <br />\n                    <hr />\n                    Presidential:\n                    <div className=\"BarDisplay\">\n                        <div className=\"BlueBar\" style={{ width: electionResults[keys[0]] + '%' }}>\n                            {keys[0] + ' ' + electionResults[keys[0]] + '%'}\n                        </div>\n                        <div className=\"RedBar\" style={{ width: electionResults[keys[1]] + '%' }}>\n                            {keys[1] + ' ' + electionResults[keys[1]] + '%'}\n                        </div>\n                    </div>\n                    <br />\n                    <hr />\n                    Congressional:\n                    <div className=\"BarDisplay\">\n                        <div className=\"BlueBar\" style={{ width: electionResults[keys[0]] + '%' }}>\n                            {keys[0] + ' ' + electionResults[keys[0]] + '%'}\n                        </div>\n                        <div className=\"RedBar\" style={{ width: electionResults[keys[1]] + '%' }}>\n                            {keys[1] + ' ' + electionResults[keys[1]] + '%'}\n                        </div>\n                    </div>\n                    <a className=\"dataSource\" href=\"https://electionlab.mit.edu/data\">source</a>\n                </div>\n            )\n        }\n    }\n}\n\nexport default ElectionDisplayBar;","import React, { PureComponent } from 'react';\n\nimport Table from 'react-bootstrap/Table';\n\nclass DemographicsTable extends PureComponent {\n    render() {\n        return (\n            <div>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Race</th>\n                            <th>Num</th>\n                            <th>Percent</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <th>White</th>\n                            <td>112</td>\n                            <td>44%</td>\n                        </tr>\n                        <tr>\n                            <th>Black</th>\n                            <td>55</td>\n                            <td>22%</td>\n                        </tr>\n                        <tr>\n                            <th>Hispanic</th>\n                            <td>80</td>\n                            <td>32%</td>\n                        </tr>\n                        <tr>\n                            <th>Asian</th>\n                            <td>6</td>\n                            <td>2%</td>\n                        </tr>\n                        <tr>\n                            <th>Other</th>\n                            <td>0</td>\n                            <td>0%</td>\n                        </tr>\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <th colSpan=\"2\">Total Population</th>\n                            <td>253</td>\n                        </tr>\n                    </tfoot>\n                </Table>\n                <a className=\"dataSource\" href=\"https://electionlab.mit.edu/data\">source</a>\n            </div>\n        );\n    }\n}\n\nexport default DemographicsTable;","import React, { Component } from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form'\n\n\n\nclass DataCorrectionPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    save_changes() {\n        this.dismiss();\n    }\n\n    dismiss() {\n        this.props.data_correction_page_status(\"done\");\n    }\n\n\n    render() {\n        return (\n            <div className=\"data_correction_page\">\n                <h4>Data Correction Form</h4>\n                <Form>\n                    <Form.Group controlId=\"data_correction.target_data\">\n                        <Form.Label>Data for correction</Form.Label>\n                        <Form.Control as=\"select\">\n                            <option>Demographic</option>\n                            <option>Election</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"data_correction.value\">\n                        <Form.Label>Changed Value</Form.Label>\n                        <Form.Control type=\"value\" placeholder=\"Please enter corrected data\" />\n                    </Form.Group>\n                </Form>\n                <div className=\"data_correction_Btns\">\n                    <Button variant=\"outline-primary\" id=\"data_change\" onClick={() => { this.save_changes() }}>Change</Button>\n                    <Button variant=\"outline-primary\" id=\"data_change_cancel\" onClick={() => { this.dismiss() }}>Cancel</Button>\n                </div>\n                <br />\n            </div>\n        );\n    }\n}\n\nexport default DataCorrectionPage;","import React, { Component } from 'react';\nimport Card from 'react-bootstrap/Card';\n\nclass Comments extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            comments: []\n        };\n    }\n\n    componentDidMount() {\n        this.get_comments();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.savedCommentData !== this.props.savedCommentData) {\n            this.get_saved_comments();\n        }\n    }\n\n    //Dynamically shows saved comments from comment modal\n    get_saved_comments() {\n        console.log(\"________________\", this.props.savedCommentData)\n        if (this.props.savedCommentData) {\n            this.setState((state) => {\n                let new_comments = state.comments;\n                new_comments.push(this.props.savedCommentData);\n                return { comments: new_comments }\n            });\n        }\n    }\n\n    // this is just for the presentation\n    get_comments() {\n        let numComments = Math.ceil(Math.random() * 3);\n        let commenter = [\"David\", \"Ilan\", \"Reed\", \"Sam\"];\n        let content = [\"Some comment about changing the election data b/c old source was invalid.\", \"Some comment about undoing the yesterdays changes done to the boundaries of the Albany county of NY.\", \"Some test comment.\", \"Another test comment.\"];\n        let comments = [];\n        for (let i = 0; i < numComments; i++) {\n            let comment = {\n                commenter: commenter[Math.round(Math.random() * 3)],\n                content: content[Math.round(Math.random() * 3)]\n            }\n            comments.push(comment);\n        }\n        this.setState({ comments: comments });\n    }\n\n    render() {\n        const { comments } = this.state;\n        const displayed_comments = [];\n        for (let i in comments) {\n            displayed_comments.push(\n                <Card>\n                    <Card.Body>\n                        {comments[i].commenter}{\": \"}{comments[i].content}\n                    </Card.Body>\n                </Card>\n            );\n        }\n\n        return (\n            <div >\n                {displayed_comments}\n            </div >\n        );\n    }\n}\n\nexport default Comments;","import React, { Component } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nclass CommentModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false\n        };\n    }\n\n    //display is boolean\n    handle_modal_display(display) {\n        this.setState({ show: display });\n    }\n\n    saveCommentData(user, text) {\n        let comment_data = {\n            commenter: user,\n            content: text\n        };\n        this.props.savedCommentData(comment_data);\n    }\n\n    render() {\n        const { show } = this.state;\n        return (\n            <div>\n                <Button variant=\"primary\" onClick={() => { this.handle_modal_display(true) }}>Create Comment</Button>\n                <Modal show={show} onHide={() => { this.handle_modal_display(false) }}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Enter comment</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <input id=\"commentModalInput\" placeholder=\" Please enter your comments here\"></input>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={() => { this.handle_modal_display(false) }}>Cancel</Button>\n                        <Button variant=\"primary\" onClick={() => {\n                            this.handle_modal_display(false);\n                            this.saveCommentData(\"User\", document.getElementById(\"commentModalInput\").value);\n                        }}>Save Comment</Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default CommentModal;","import React, { Component } from 'react';\n\n// import InputGroup from 'react-bootstrap/InputGroup';\n// import FormControl from 'react-bootstrap/FormControl';\n// import Table from 'react-bootstrap/Table';\n// import Jumbotron from 'react-bootstrap/Jumbotron';\n// import Tabs from 'react-bootstrap/Tabs';\n// import Tab from 'react-bootstrap/Tab';\n// import Button from 'react-bootstrap/Tab';\nimport Collapsible from 'react-collapsible';\n\nimport ElectionDisplayBar from '../components/ElectionDisplayBar';\nimport DemographicsTable from '../components/DemographicsTable';\nimport DataCorrectionPage from '../components/DataCorrectionPage';\nimport Comments from '../components/Comments';\nimport CommentModal from '../components/CommentModal';\n\nclass LeftSidebar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: \"data_display\",\n            comment_data: undefined\n        }\n    }\n\n    createList = () => {\n        let list = [];\n\n        const feature = this.props.selected; //the selected feature\n\n        if (feature) {\n            if (feature.properties) {\n                const properties = feature.properties;\n                for (const p in properties) {\n                    list.push(<div>{`${p}: ${properties[p]}`}</div>);\n                }\n                // list.push(<div>State: {properties['name']}</div>);\n            }\n        }\n        return list;\n    }\n\n    //For data correction page\n    // data_correct_selected() {\n    //     this.setState({ mode: \"data_correction\" });\n    // }\n\n    //For data correction page to return page_status\n    get_data_correction_page_status = (page_status) => {\n        if (page_status === \"done\") {\n            this.setState({ mode: \"data_display\" });\n        }\n    }\n\n    get_comments_modal_data = (comment_modal_data) => {\n        if (comment_modal_data) {\n            this.setState({ comment_data: comment_modal_data });\n        }\n    }\n\n    _handleClick = event => {\n        this.props.showErrorPins();\n    }\n\n    render() {\n        const { mode } = this.state;\n        const { comment_data } = this.state;\n        const list = this.createList();\n        // const feature = this.props.selected;\n\n        if (list.length > 0) {\n            if (mode === \"data_display\") {\n                return (\n                    <div >\n                        <Collapsible trigger=\"View General Info\" open={true}>\n                            {list}\n                        </Collapsible>\n                        <Collapsible trigger=\"View Elections\">\n                            <ElectionDisplayBar />\n                        </Collapsible>\n                        <Collapsible trigger=\"View Demographics\">\n                            <DemographicsTable />\n                        </Collapsible>\n                        <Collapsible trigger=\"Modify Data\">\n                            <DataCorrectionPage data_correction_page_status={this.get_data_correction_page_status} />\n                        </Collapsible>\n                        <Collapsible trigger=\"View Comments\">\n                            <Comments savedCommentData={comment_data} />\n                            <br />\n                            <CommentModal savedCommentData={this.get_comments_modal_data} />\n                            <br />\n                        </Collapsible>\n                        <Collapsible trigger=\"View Map Errors\">\n                            <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View All</button>\n                            <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View Self Intersecting Boundaries</button>\n                            <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View Open Borders</button>\n                            <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View Gaps in Precinct Coverage</button>\n                            <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View Precinct Multipolygon</button>\n                            <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View Overlapping Precincts</button>\n                        </Collapsible>\n                    </div >\n                );\n            }\n        }\n        return (\n            <div>\n                Click on a highlighted state to view details\n            </div>\n        );\n    }\n}\n\nexport default LeftSidebar;","/* global setTimeout */\nimport React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { EditorModes } from 'react-map-gl-draw';\n\n\nconst MODES = [\n    { id: EditorModes.SELECT, text: 'Edit Feature', icon: 'icon-select.svg' },\n    { id: EditorModes.DRAW_POINT, text: 'Draw Point', icon: 'icon-point.svg' },\n    { id: EditorModes.DRAW_PATH, text: 'Draw Polyline', icon: 'icon-path.svg' },\n    { id: EditorModes.DRAW_POLYGON, text: 'Draw Polygon', icon: 'icon-polygon.svg' },\n    { id: EditorModes.DRAW_RECTANGLE, text: 'Draw Rectangle', icon: 'icon-rectangle.svg' }\n];\n\nconst Container = styled.div`\n  position: absolute;\n//   width: 48px;\n  left: 260px;\n  top: 240px;\n  background: #fff;\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.15);\n  outline: none;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  padding: 0px;\n  margin: 0px;\n`;\n\nconst Row = styled.div`\n  height: 34px;\n  width: 34px;\n  padding: 7px;\n  display: flex;\n  justify-content: left;\n  color: ${props => (props.selected ? '#ffffff' : 'inherit')};\n  background: ${props => (props.selected ? '#0071bc' : props.hovered ? '#e6e6e6' : 'inherit')};\n`;\n\nconst Img = styled.img`\n  max-width: 20px !important;\n`;\n\nconst Tooltip = styled.div`\n  position: absolute;\n  left: 52px;\n  padding: 4px;\n  background: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  min-width: 100px;\n  max-width: 300px;\n  height: 24px;\n  font-size: 12px;\n  z-index: 9;\n  pointer-events: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Delete = styled(Row)`\n  &:hover {\n    background: ${props => (props.selected ? '#0071bc' : '#e6e6e6')};\n  }\n  &:active: {\n    background: ${props => (props.selected ? '#0071bc' : 'inherit')};\n  }\n`;\n\nexport default class Toolbar extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            deleting: false,\n            hoveredId: null,\n        };\n    }\n\n    _onHover = evt => {\n        this.setState({ hoveredId: evt && evt.target.id });\n    };\n\n    //TODO probably dont neet to pass the evt \n    _onDelete = () => {\n        this.props.onDelete();\n        this.setState({ deleting: true });\n        setTimeout(() => this.setState({ deleting: false }), 500)\n    };\n\n    _onSaveChange = () => {\n        console.log(this.props.features)\n        this.props.toolBarRequest(this.props.features.data);\n    }\n\n    render() {\n        const { selectedMode } = this.props;\n        const { hoveredId } = this.state;\n        return (\n            <Container>\n                {MODES.map(m => {\n                    return (\n                        <Row\n                            onClick={this.props.onSwitchMode}\n                            onMouseOver={this._onHover}\n                            onMouseOut={_ => this._onHover(null)}\n                            selected={m.id === selectedMode}\n                            hovered={m.id === hoveredId}\n                            key={m.id}\n                            id={m.id}\n                        >\n                            <Img id={m.id} onMouseOver={this._onHover} src={m.icon} />\n                            {hoveredId === m.id && <Tooltip>{m.text}</Tooltip>}\n                        </Row>\n                    );\n                })}\n                <Delete\n                    selected={this.state.deleting}\n                    onClick={this._onDelete}\n                    onMouseOver={this._onHover}\n                    onMouseOut={_ => this._onHover(null)}\n                >\n                    <Img\n                        id={'delete'}\n                        onMouseOver={this._onHover}\n                        src={'icon-delete.svg'}\n                    />\n                    {hoveredId === 'delete' && <Tooltip>{'Delete'}</Tooltip>}\n                </Delete>\n                <Row\n                    onClick={() => this._onSaveChange()}\n                    onMouseOver={this._onHover}\n                    onMouseOut={_ => this._onHover(null)}\n                    id=\"saveDrawBtn\"\n                ><span style={{ \"fontSize\": \"10px\" }}> save</span></Row>\n            </Container>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nclass UserModeSelector extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Dropdown>\n                <Dropdown.Toggle variant=\"success\" id=\"userModeSelect\">\n                    Switch User Mode\n            </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    <Dropdown.Item onClick={() => this.props.userModeSelect(\"View\")}>View</Dropdown.Item>\n                    <Dropdown.Item onClick={() => this.props.userModeSelect(\"Edit\")}>Edit</Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        );\n    }\n}\n\nexport default UserModeSelector;","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport MapGL, { Popup, NavigationControl, FullscreenControl, ScaleControl, Source, Layer, LinearInterpolator, WebMercatorViewport } from 'react-map-gl';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { json } from 'd3-request';\nimport bbox from '@turf/bbox';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport Geocoder from 'react-map-gl-geocoder';\nimport { Editor, EditorModes } from 'react-map-gl-draw';\n\n/**\n * CSS Styling\n */\nimport './App.css';\nimport './styles/Collapsible.css';\nimport './styles/PinPopup.css';\nimport './static/app.css';\n// import './styles/GeoCodeSearch.css';\nimport 'react-map-gl-geocoder/dist/mapbox-gl-geocoder.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\n/**\n * Map layers\n */\nimport { countyDataLayerFillable, countyDataLayerFillableHighlight, countyDataLayerOutline } from './layers/CountyLayer';\nimport { stateLayerFill } from './layers/StateLayer';\nimport { precinctLayerFill, precinctLayerFillHighlight, precinctLayerOutline } from './layers/PrecinctLayer';\n\n/**\n * Our components\n */\nimport Pins from './components/map-components/pins';\nimport ErrorInfo from './components/map-components/error-info';\nimport StateSelector from './components/StateSelector';\nimport LeftSidebar from './components/LeftSidebar';\nimport Toolbar from './toolbar';\nimport UserModeSelector from './components/UserModeSelector';\n\n/**\n * Static data files\n */\nimport ERRORS from './data/errors.json';\nimport STATES_TOOLTIP_DATA from './data/states_tooltip_data.geojson';\nimport NY_COUNTY_SHORELINE_DATA from './data/ny_county_shoreline.geojson';\nimport NY_PRECINCT_DATA from './data/ny_precincts.geojson';\n// import TESTING_PRECINCT_DATA from './data/GeoJSON_example.geojson';\n\n/**\n * Mapbox Style & API Key\n */\nconst MAPBOX_STYLE = 'mapbox://styles/shortland/ck7fn4gmu014c1ip60jlumnm2';\nconst MAPBOX_API = 'pk.eyJ1Ijoic2hvcnRsYW5kIiwiYSI6ImNqeXVzOWhsbjBpYzczY29hNGZycTlqdXAifQ.B6l-uEqGG-Pw6-quz4eflQ';\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            countyData: null,\n            countyDataOutline: null,\n            stateData: null,\n            hoveredFeature: null,\n            precinctData: null,\n            viewport: {\n                width: \"100%\",\n                height: window.innerHeight - 56,\n                latitude: 37.0902,\n                longitude: -105.7129,\n                zoom: 3.3,\n            },\n            popupInfo: null,\n            selectedFeature: null,\n            selectedMode: EditorModes.READ_ONLY,\n            selectedFeatureId: null,\n            shouldShowPins: false,\n            features: {},\n            selectedFeatureIndex: null,\n            userMode: \"View\",\n            filter: ['in', 'NAME', ''],\n        };\n\n        this._editorRef = null;\n        this.showErrorPins = this.showErrorPins.bind(this);\n    }\n\n    /**\n     * For Mapbox geocoding\n     */\n    mapRef = React.createRef();\n\n    handleViewportChange = viewport => {\n        this.setState({\n            viewport: { ...this.state.viewport, ...viewport }\n        });\n    };\n\n    handleGeocoderViewportChange = viewport => {\n        const geocoderDefaultOverrides = { transitionDuration: 1000 };\n\n        return this.handleViewportChange({\n            ...viewport,\n            ...geocoderDefaultOverrides,\n        });\n    };\n\n    handleOnResult = event => {\n        console.log(event.result);\n        this.setState({\n            searchResultLayer: new GeoJsonLayer({\n                id: \"search-result\",\n                data: event.result.geometry,\n                getFillColor: [255, 0, 0, 128],\n                getRadius: 1000,\n                pointRadiusMinPixels: 10,\n                pointRadiusMaxPixels: 10,\n            })\n        });\n    };\n\n    /**\n     * For React Map Gl Draw\n     */\n    _onDelete = () => {\n        const { selectedFeatureIndex } = this.state;\n        if (selectedFeatureIndex === null || selectedFeatureIndex === undefined) {\n            toast.info(\"Please select a new created precint before deleting action\", {\n                position: toast.POSITION.BOTTOM_RIGHT,\n            });\n            return;\n        }\n        else {\n            toast.info(\"Selected precinct is deleted\", {\n                position: toast.POSITION.BOTTOM_RIGHT,\n            });\n            let features = this.state.features;\n            if (selectedFeatureIndex > -1) {\n                features.data.splice(selectedFeatureIndex, 1);\n            }\n            this.setState({ selectedFeatureIndex: null, selectedMode: EditorModes.READ_ONLY, features: features });\n        }\n        this._editorRef.deleteFeatures(selectedFeatureIndex);\n\n    };\n\n    _switchMode = evt => {\n        let selectedMode = evt.target.id;\n        if (selectedMode === this.state.selectedMode) {\n            selectedMode = null;\n        }\n\n        this.setState({ selectedMode });\n    };\n\n    //Map GL Draw select a feature (a created shape by the MapGLDraw)\n    _onSelect = selected => {\n        this.setState({ selectedFeatureIndex: (selected && selected.selectedFeatureIndex) });\n    };\n    //Map GL Draw update (user draw a new shape)\n    _onUpdate = (features) => {\n        this.setState({ features: features, selectedMode: EditorModes.READ_ONLY, selectedFeatureIndex: null });\n    }\n    // _updateViewport = viewport => {\n    //     this.setState({ viewport });\n    // };\n\n    //toobar save button click event\n    _onSaveRequest = (toolBarRequest) => {\n        if (toolBarRequest) {\n            let selected_saved_feature = this.state.features.data[this.state.selectedFeatureIndex];\n            console.log(selected_saved_feature);\n            this.setState({ selectedMode: EditorModes.READ_ONLY, selectedFeatureIndex: null })\n            if (selected_saved_feature) {\n                toast.info(\"New precinct is saved\", {\n                    position: toast.POSITION.BOTTOM_RIGHT,\n                });\n            }\n            else {\n                toast.info(\"Please select a new created precint to save\", {\n                    position: toast.POSITION.BOTTOM_RIGHT,\n                });\n            }\n        }\n    }\n\n    _renderToolbar = () => {\n        const { userMode } = this.state;\n        if (userMode === \"Edit\") {\n            return (\n                <Toolbar\n                    selectedMode={this.state.selectedMode}\n                    onSwitchMode={this._switchMode}\n                    onDelete={this._onDelete}\n                    onSelect={this._onSelect}\n                    features={this.state.features}\n                    selectedFeatureId={this.state.selectedFeatureId}\n                    toolBarRequest={this._onSaveRequest}\n                />\n            );\n        }\n        else {\n            return;\n        }\n\n    };\n\n    componentDidMount() {\n        /**\n         * State data\n         */\n        json(\n            STATES_TOOLTIP_DATA,\n            (error, response) => {\n                if (!error) {\n                    this.setState({\n                        stateData: response,\n                    });\n                }\n            }\n        );\n\n        /**\n         * County data outline\n         */\n        json(\n            NY_COUNTY_SHORELINE_DATA,\n            (error, response) => {\n                if (!error) {\n                    this.setState({\n                        countyDataOutline: response,\n                    });\n                }\n            }\n        );\n\n        /**\n         * County data\n         */\n        json(\n            NY_COUNTY_SHORELINE_DATA,\n            (error, response) => {\n                if (!error) {\n                    this.setState({\n                        countyData: response,\n                    });\n                }\n            }\n        );\n\n        /**\n         * Precinct Data\n         */\n        json(\n            NY_PRECINCT_DATA,\n            (error, response) => {\n                if (!error) {\n                    this.setState({\n                        precinctData: response,\n                    });\n                }\n            }\n        );\n    }\n\n    _onClick = event => {\n        // sets the selected feature onclcik, to have properties displayed by LeftSidebar\n        const {\n            features,\n        } = event;\n\n        const stateFeature = features && features.find(f => f.layer.id === 'stateFill');\n        if (stateFeature) {\n            // if a clicks on a state that was already selected/clicked on\n            if (this.state.selectedFeature) {\n                if (stateFeature.properties.name === this.state.selectedFeature.properties.name) {\n                    this._zoomToFeature(event);\n                    return;\n                }\n            } else {\n                toast.info(\"Click the same feature (state/county) again to zoom in.\", {\n                    position: toast.POSITION.BOTTOM_RIGHT,\n                });\n            }\n\n            this.setState({ selectedFeature: stateFeature });\n            return;\n        }\n\n        const countyFeature = features && features.find(f => f.layer.id === 'countyFill');\n        if (countyFeature) {\n            // if a clicks on a county that was already selected/clicked on\n            if (this.state.selectedFeature) {\n                if (countyFeature.properties.NAME === this.state.selectedFeature.properties.NAME) {\n                    this._zoomToFeature(event);\n                    return;\n                }\n            }\n\n            this.setState({ selectedFeature: countyFeature });\n            return;\n        }\n\n        const precinctFeature = features && features.find(f => f.layer.id === 'precinctFill');\n        if (precinctFeature) {\n            this.setState({ selectedFeature: precinctFeature });\n            return;\n        }\n    };\n\n    _zoomToFeature(event) {\n        const feature = event.features[0];\n\n        if (!feature) {\n            return;\n        }\n\n        if (feature.layer.id === \"stateFill\" || feature.layer.id === \"countyFill\") {\n            const [minLng, minLat, maxLng, maxLat] = bbox(feature);\n            const viewport = new WebMercatorViewport(this.state.viewport);\n            const { longitude, latitude, zoom } = viewport.fitBounds([[minLng, minLat], [maxLng, maxLat]], {\n                padding: 40\n            });\n\n            this.setState({\n                viewport: {\n                    ...this.state.viewport,\n                    longitude,\n                    latitude,\n                    zoom,\n                    transitionInterpolator: new LinearInterpolator({\n                        around: [event.offsetCenter.x, event.offsetCenter.y]\n                    }),\n                    transitionDuration: 1000,\n                }\n            });\n            return;\n        }\n    }\n\n    _onHover = event => {\n        const {\n            features,\n            srcEvent: { offsetX, offsetY },\n        } = event;\n\n        const stateHovered = features && features.find(f => f.layer.id === 'stateFill');\n        this.setState({ stateHovered, x: offsetX, y: offsetY });\n        if (stateHovered) {\n            return;\n        }\n\n        const countyHovered = features && features.find(f => f.layer.id === 'countyFill');\n        this.setState({ countyHovered, x: offsetX, y: offsetY });\n        if (countyHovered) {\n            this.setState({ filter: ['in', 'NAME', countyHovered.properties.NAME] });\n            return;\n        }\n\n\n        const precinctHovered = features && features.find(f => f.layer.id === 'precinctFill');\n        this.setState({ precinctHovered, x: offsetX, y: offsetY });\n        if (precinctHovered) {\n            this.setState({ filter: ['in', 'GEOID10', precinctHovered.properties.GEOID10] });\n            return;\n        }\n    }\n\n    _renderTooltip() {\n        const { hoveredFeature, countyHoveredFeature, x, y } = this.state;\n\n        if (hoveredFeature) {\n            return (\n                hoveredFeature && (\n                    <div className=\"state-tooltip\" style={{ left: x, top: y }}>\n                        <h5>{hoveredFeature.properties.name}</h5>\n                        <div>Counties: {hoveredFeature.properties.amount_counties}</div>\n                        {/* <br /> */}\n                        {/* <div style={{ \"fontStyle\": \"italic\" }}>(click again to enlarge)</div> */}\n                    </div>\n                )\n            );\n        }\n\n        if (countyHoveredFeature) {\n            return (\n                countyHoveredFeature && (\n                    <div className=\"state-tooltip\" style={{ left: x, top: y }}>\n                        <h5>{countyHoveredFeature.properties.NAME} County</h5>\n                        <div>FIPS Code: {countyHoveredFeature.properties.FIPS_CODE}</div>\n                        {/* <br /> */}\n                        {/* <div style={{ \"fontStyle\": \"italic\" }}>(click again to enlarge)</div> */}\n                    </div>\n                )\n            );\n        }\n    }\n\n    userModeSelect = (userMode) => {\n        if (userMode) {\n            this.setState({ userMode: userMode });\n        }\n    }\n\n    stateSelect(name) {\n        let latitude = 0;\n        let longitude = 0;\n        let zoom;\n\n        switch (name) {\n            case \"New York\":\n            case \"NY\":\n                latitude = 43.2994;\n                longitude = -76.2179;\n                zoom = 6;\n                break;\n            case \"Wisconsin\":\n            case \"WI\":\n                latitude = 44.7844;\n                longitude = -89.7879;\n                zoom = 6;\n                break;\n            case \"Utah\":\n            case \"UT\":\n                latitude = 39.3210;\n                longitude = -112.0937;\n                zoom = 6;\n                break;\n            default:\n        }\n\n        this.setState({\n            viewport: {\n                ...this.state.viewport,\n                latitude: latitude,\n                longitude: longitude,\n                zoom: zoom,\n            },\n        });\n    }\n\n    /**\n     * Rendering error pins on the map & its popup\n     */\n    _onClickError = error_data => {\n        this.setState({ popupInfo: error_data });\n        console.log(error_data);\n        this.setState({\n            viewport: {\n                ...this.state.viewport,\n                longitude: error_data.longitude,\n                latitude: error_data.latitude,\n                transitionDuration: 1000,\n                zoom: 11,\n            }\n        });\n    };\n\n    _renderErrorPopup() {\n        const { popupInfo } = this.state;\n\n        return (\n            popupInfo && (\n                <Popup\n                    tipSize={5}\n                    anchor=\"top\"\n                    longitude={popupInfo.longitude}\n                    latitude={popupInfo.latitude}\n                    closeOnClick={false}\n                    onClose={() => this.setState({ popupInfo: null })}\n                >\n                    <ErrorInfo info={popupInfo} />\n                </Popup>\n            )\n        );\n    }\n\n    showErrorPins() {\n        const { shouldShowPins } = this.state;\n        if (shouldShowPins) {\n            this.setState({ shouldShowPins: false });\n        } else {\n            this.setState({ shouldShowPins: true });\n        }\n    }\n\n    render() {\n        const { viewport, stateData, countyDataOutline, countyData, precinctData, selectedMode, shouldShowPins, filter } = this.state;\n\n        return (\n            <div className=\"App\">\n                <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n                    <Navbar.Brand href=\"#home\">Election Data Quality</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            {/* <Nav.Link href=\"#tmp\">Something</Nav.Link> */}\n                            <StateSelector\n                                select_state={(state_abv) => this.stateSelect.bind(this, state_abv)}\n                            />\n                            <UserModeSelector userModeSelect={(selectedMode) => this.userModeSelect(selectedMode)} />\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n\n                <div>\n                    <div id=\"leftCol\">\n                        <LeftSidebar\n                            selected={this.state.selectedFeature}\n                            showErrorPins={this.showErrorPins.bind(this)}\n                        />\n                    </div>\n\n                    <MapGL\n                        {...viewport}\n                        onViewportChange={(viewport => this.setState({ viewport: viewport }))}\n                        mapStyle={MAPBOX_STYLE}\n                        mapboxApiAccessToken={MAPBOX_API}\n                        onHover={this._onHover}\n                        onClick={this._onClick}\n                        doubleClickZoom={false}\n                        ref={this.mapRef}\n                    >\n                        <Editor\n                            ref={_ => (this._editorRef = _)}\n                            clickRadius={12}\n                            onSelect={(selected) => this._onSelect(selected)}\n                            onUpdate={(features) => this._onUpdate(features)}\n                            mode={selectedMode}\n                        />\n\n                        {/* Geocoder - enables searching on the map */}\n                        <Geocoder\n                            mapRef={this.mapRef}\n                            onResult={this.handleOnResult}\n                            onViewportChange={this.handleGeocoderViewportChange}\n                            mapboxApiAccessToken={MAPBOX_API}\n                            position=\"top-right\"\n                        />\n                        {/* This is used alongside the Geocoder... \n                            But apparently it doesn't need to be here for the geocoder to work?\n                            I commented it out - because it mysteriously breaks the Editor...\n                         */}\n                        {/* <DeckGL {...viewport} layers={[searchResultLayer]} /> */}\n\n                        {/* For rendering the controls at top left of the map */}\n                        <div className=\"FullScreenController MapControllers\">\n                            <FullscreenControl />\n                        </div>\n                        <div className=\"NavigationController MapControllers\">\n                            <NavigationControl />\n                        </div>\n                        <div className=\"ScaleController MapControllers\">\n                            <ScaleControl />\n                        </div>\n\n                        {/* NY COUNT DATA (FILL & HOVER) */}\n                        <Source type=\"geojson\" data={countyData}>\n                            <Layer\n                                {...countyDataLayerFillableHighlight}\n                                filter={filter}\n                                minzoom={5}\n                                maxzoom={8}\n                            />\n                            <Layer\n                                {...countyDataLayerFillable}\n                                minzoom={5}\n                                maxzoom={8}\n                            />\n                        </Source>\n\n                        {/* NY COUNTY DATA (OUTLINE) */}\n                        <Source type=\"geojson\" data={countyDataOutline}>\n                            <Layer\n                                {...countyDataLayerOutline}\n                                minzoom={5}\n                            // maxzoom={8}\n                            />\n                        </Source>\n\n                        {/* STATES DATA */}\n                        <Source type=\"geojson\" data={stateData}>\n                            <Layer\n                                {...stateLayerFill}\n                                maxzoom={5}\n                            />\n                        </Source>\n\n                        {/* NY PRECINCT DATA */}\n                        <Source type=\"geojson\" data={precinctData}>\n                            <Layer\n                                {...precinctLayerFillHighlight}\n                                filter={filter}\n                                minzoom={8}\n                            />\n                            <Layer\n                                {...precinctLayerOutline}\n                                minzoom={8}\n                            />\n                            <Layer\n                                {...precinctLayerFill}\n                                minzoom={8}\n                            />\n                        </Source>\n\n                        {this._renderTooltip()}\n\n                        {this._renderToolbar()}\n\n                        {/* For rendering pins over our map */}\n                        <Pins\n                            data={ERRORS}\n                            onClick={this._onClickError}\n                            shouldShowPins={shouldShowPins}\n                        />\n                        {this._renderErrorPopup()}\n                    </MapGL>\n                </div>\n\n                <ToastContainer />\n            </div >\n        );\n    }\n}\n\nexport function renderToDom(container) {\n    render(<App />, container);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('map'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}