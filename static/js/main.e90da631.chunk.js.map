{"version":3,"sources":["data/nationalparks/New_York_National_Parks.GeoJSON","data/nationalparks/Wisconsin_National_Parks.GeoJSON","data/nationalparks/Utah_National_Parks.GeoJSON","data/AppData.js","layers/CountyLayer.js","layers/StateLayer.js","layers/PrecinctLayer.js","layers/CongressionalLayer.js","layers/NationalParkLayer.js","components/map/ErrorPins.js","components/map/ErrorModal.js","components/navbar/StateSelector.js","components/sidebar/ElectionDisplayBar.js","components/sidebar/DemographicsTable.js","components/sidebar/DataCorrectionPage.js","components/sidebar/ModifyNeighbors.js","components/sidebar/Comments.js","components/sidebar/CommentModal.js","components/sidebar/MergePrecinct.js","components/sidebar/MapErrors.js","components/sidebar/LeftSidebar.js","components/map/toolbar.js","components/navbar/MergeBtn.js","components/navbar/UserModeSelector.js","components/navbar/AddRemNeighborsBtn.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","AppData","asyncFetch","url","a","fetch","response","json","this","allStates","baseUrl","data","status","alert","i","features","type","content","feature","properties","name","id","congressional_districts","congressionalDistrictIds","geometry","push","featureCollection","stateID","concat","length","currFeature","parentId","childrenId","countyId","countyID","console","log","f","precinctId","precinctId1","precinctId2","countyDataLayerFillable","paint","countyDataLayerOutline","layout","stateLayerFill","stateLayerOutline","precinctLayerFill","precinctLayerOutline","congressionalLayerFill","congressionalLayerOutline","nationalParkLayerFill","nationalParkLayerOutline","Pins","props","onClick","shouldShowPins","map","city","index","key","longitude","latitude","height","viewBox","style","cursor","fill","stroke","transform","d","PureComponent","ErrorInfo","info","textAlign","from","StateSelector","Dropdown","Toggle","variant","Menu","Item","href","select_state","Component","ElectionDisplayBar","state","votingData","election","presidental","undefined","congressional","elections","allElections","Object","keys","electionData","year","electionInYear","includes","toString","ans","result","resultsByParty","resultInYear","getResults","resultInYearKey","setState","allElection","years","substring","buttonList","Button","className","changeElection","bind","parseInt","getAllElection","ButtonGroup","size","yearButtons","width","nextProps","prevState","DemographicsTable","total","demographicData","value","demographic","race","calculateTotal","Table","striped","bordered","hover","getPopulation","colSpan","DataCorrectionPage","dismiss","data_correction_page_status","Form","Group","controlId","Label","Control","as","placeholder","save_changes","ModifyNeighbors","mode","dynamicAddNeighbor","neighbors","selectedFeature","neighborsId","r","modify_neighbors_page_status","targetPrecinct","precinctsForEdit","precinctSelectedForEdit","appData","addPrecinctNeighbor","then","respond","dynamicAddNeighborId","forceUpdate","deletePrecinctNeighbor","dynamicDeleteNeighborId","newId","trim","deletedId","oldNeighbors","newNeighbors","evt","switchMode","getAllNeighbors","saveAction","MapErrors","selectedErrorType","stateId","allError","allErrors","filteredErrors","slice","getErrorInState","errorList","ListGroup","errorListOnClick","errorType","DropdownButton","title","changeErrorType","createErrorListByType","LeftSidebar","createList","list","selected","p","get_data_correction_page_status","page_status","get_modify_neighbors_page_status","leftSideBarStatus","get_mapErrorList_onClick","errorData","get_comments_modal_data","comment_modal_data","comment_data","_handleClick","event","showErrorPins","userMode","selectedFeatureType","trigger","open","marginLeft","MODES","EditorModes","SELECT","text","icon","DRAW_POINT","DRAW_PATH","DRAW_POLYGON","DRAW_RECTANGLE","Container","styled","div","Row","hovered","Img","img","Tooltip","Delete","Toolbar","_onHover","hoveredId","target","_onDelete","onDelete","deleting","setTimeout","_onSaveChange","toolBarRequest","selectedMode","m","onSwitchMode","onMouseOver","onMouseOut","_","src","MergeBtn","enabled","mergePrecincts","disabled","AddRemNeighborsBtn","toggle","removePrecinctNeighbor","MAPBOX_API","App","handleViewportChange","viewport","handleGeocoderViewportChange","transitionDuration","handleOnResult","searchResultLayer","GeoJsonLayer","getFillColor","getRadius","pointRadiusMinPixels","pointRadiusMaxPixels","selectedFeatureIndex","toast","position","POSITION","BOTTOM_RIGHT","splice","READ_ONLY","_editorRef","deleteFeatures","_switchMode","_onSelect","_onUpdate","_onSaveRequest","selected_saved_feature","_renderToolbar","onSelect","_onClick","stateFeature","find","layer","countyFeature","congressionalFeature","precinctFeature","previouslySelected","_zoomToFeature","onStateSelected","onCountySelected","onPrecinctSelected","srcEvent","shiftKey","removeHighlightPrecinctNeighbors","removeSelectedHighlight","addSelectedHighlight","mapRef","current","getMap","x","y","source","lastHovered","hoveredFeature","setFeatureState","stateHovered","countyHovered","congressionalHovered","precinctHovered","isState","isCounty","isCongressional","isPrecinct","onPrecinctHover","userModeSelect","precinct_selection_to_edit","precinct_selected_for_edit","_onClickError","error_data","popupInfo","zoom","fetchPrecinctShape","geo","oneArray","coordinates","queryRenderedFeatures","layers","selectedPrecinctGroup","precinct1","pop","precinct2","r1","fetchAndUpdatePrecinct","r2","success","BOTTOM_CENTER","error","highlightPrecinctNeighbors","mergePrecinct","toggleLayer","e","stopPropagation","states","counties","precincts","parks","stopPropogation","nativeEvent","stopImmediatePropagation","_renderCheckboxes","Card","border","backgroundColor","Header","Body","Check","label","defaultChecked","Footer","lineHeight","stateData","countyData","countyDataOutline","congressionalDistrictData","precinctData","window","innerHeight","parksData","React","createRef","loadWisconsinParks","loadNyParks","loadUtahParks","fetchCongressionalDistrictByState","fetchCountiesByState","fetchShapeOfPrecinctsByCounty","multiSelecting","selectingMultiple","prevSelected","fetchPrecinctInfo","oldData","neighborsStrId","fullName","isGhost","parentDistrictId","precinctErrors","newProp","assign","updatedPrecinct","addPrecinctToGroup","clearPrecinctGroup","group","warn","bbox","minLng","minLat","maxLng","maxLat","WebMercatorViewport","fitBounds","padding","transitionInterpolator","LinearInterpolator","around","offsetCenter","Nid","neighbor","left","top","tipSize","anchor","closeOnClick","onClose","fetchAllPrecinctError","errorMap","fetchAllStates","getAllErrors","maxzoom","minzoom","state_abv","stateSelect","precinctIsSelected","get_leftSideBar_status","onViewportChange","mapStyle","mapboxApiAccessToken","onHover","doubleClickZoom","ref","fontSize","right","clickRadius","onUpdate","onResult","renderStateLayers","renderNationalParks","renderCountyLayers","renderCongressionalLayers","renderPrecinctLayers","_renderTooltip","ERRORS","_renderErrorPopup","NY_NATIONAL_PARKS","UTAH_NATIONAL_PARKS","WISCONSIN_NATIONAL_PARKS","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e90da631.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/New_York_National_Parks.e4acd6e7.GeoJSON\";","module.exports = __webpack_public_path__ + \"static/media/Wisconsin_National_Parks.e6f6ecd3.GeoJSON\";","module.exports = __webpack_public_path__ + \"static/media/Utah_National_Parks.cc5c7638.GeoJSON\";","/**\n * A class to access all our fetch API calls through\n */\nclass AppData {\n    constructor() {\n        this.allStates = null;\n\n        // For development\n        //this.baseUrl = \"//0.0.0.0:1234/\";\n\n        // For production\n        this.baseUrl = \"https://ElectionDataQuality.com:1234/\";\n    }\n\n    asyncFetch = async (url) => {\n        const response = await fetch(url);\n        const json = await response.json();\n        return json;\n    }\n\n    //-------- * STATES * -----------\n    async fetchAllStates() {\n        const data = await this.asyncFetch(this.baseUrl + 'allStates');\n\n        if (data.status != \"ok\") {\n            alert(\"server error: unable to get data\");\n            return;\n        }\n\n        let features = {\n            type: \"FeatureCollection\",\n            features: [],\n        };\n\n        for (let i in data.content) {\n            let feature = {\n                type: \"Feature\",\n                properties: {\n                    name: data.content[i].name,\n                    id: data.content[i].id,\n                    congressional_districts: data.content[i].congressionalDistrictIds,\n                },\n                id: data.content[i].id,\n                geometry: data.content[i].geometry,\n            };\n\n            features.features.push(feature);\n        }\n\n        //console.log(data.content)\n        //console.log(features);\n        return {\n            featureCollection: features,\n        };\n    }\n\n    //---------- * CONGRESSIONAL DISTRICTS * --------------\n    async fetchCongressionalDistrictByState(stateID) {\n        const data = await this.asyncFetch(this.baseUrl + 'congressionalDistrictsForState?stateId='.concat(stateID));\n\n        if (data.status != \"ok\") {\n            alert(\"server error: unable to get data\");\n            return;\n        }\n\n        let features = data.content.features\n        for (let i = 0; i < features.length; i++) {\n            let currFeature = features[i];\n            let properties = {\n                \"id\": currFeature.id,\n                \"name\": currFeature.name,\n                \"parentId\": currFeature.parentId,\n                \"childrenId\": currFeature.childrenId\n            }\n            //delete currFeature.id;\n            delete currFeature.name;\n            delete currFeature.parentId;\n            delete currFeature.childrenId;\n            currFeature[\"properties\"] = properties;\n        }\n\n        data.content.features = features;\n\n        return data.content;\n    }\n\n    async fetchAllCongressionalDistricts() {\n        const data = await this.asyncFetch(this.baseUrl + 'allCongressionalDistricts');\n\n        if (data.status != \"ok\") {\n            alert(\"server error: unable to get data\");\n            return;\n        }\n        //console.log(data.content)\n        return data.content;\n    }\n\n    //----t---------- * COUNTIES * ------------------\n    async fetchCountiesByState(stateID) {\n        const data = await this.asyncFetch(this.baseUrl + 'countiesInState?stateId='.concat(stateID));\n\n        if (data.status != \"ok\") {\n            alert(\"server error: unable to get data\");\n            return;\n        }\n\n        let featureCollection = {\n            type: \"FeatureCollection\",\n            features: [],\n        };\n\n        for (let i in data.content) {\n            let feature = {\n                type: \"Feature\",\n                properties: {\n                    name: data.content[i].name,\n                    id: data.content[i].countyId\n                },\n                id: data.content[i].countyId,\n                geometry: data.content[i].geometry,\n            };\n\n            featureCollection.features.push(feature);\n        }\n\n        return featureCollection;\n    }\n\n    //------------ * PRECINCTS * ----------------\n    async fetchShapeOfPrecinctsByCounty(countyID) {\n        const data = await this.asyncFetch(this.baseUrl + 'shapeOfPrecinctByCounty?countyId='.concat(countyID));\n\n        if (data.status != \"ok\") {\n            console.log(data)\n            alert(\"server error: unable to get precinct shapes\");\n            return;\n        }\n\n        let featureCollection = {\n            type: \"FeatureCollection\",\n            features: [],\n        };\n\n        for (let i in data.content) {\n            let f = {\n                type: \"Feature\",\n                properties: {\n                    id: data.content[i].id\n                },\n                geometry: data.content[i].geometry,\n                id: data.content[i].id\n            };\n            featureCollection.features.push(f);\n        }\n\n        console.log(featureCollection)\n\n        return featureCollection\n    }\n\n    async fetchPrecinctShape(precinctId) {\n        const data = await this.asyncFetch(this.baseUrl + 'shapeOfPrecinct?precinctId='.concat(precinctId));\n\n        if (data.status != \"ok\") {\n            console.log(data)\n            alert(\"server error: unable to get precinct shapes\");\n            return;\n        }\n\n        let featureCollection = {\n            type: \"FeatureCollection\",\n            features: [],\n        };\n\n        let f = {\n            type: \"Feature\",\n            properties: {\n                id: data.content.id\n            },\n            geometry: data.content.geometry,\n            id: data.content.id\n        };\n        featureCollection.features.push(f);\n\n        return featureCollection;\n    }\n\n    async fetchPrecinctInfo(precinctId) {\n        const data = await this.asyncFetch(this.baseUrl + 'precinctInfo?precinctId='.concat(precinctId));\n\n        if (data.status != \"ok\") {\n            console.log(data);\n            alert(\"server error : unable to get precinct info\");\n            return\n        }\n\n        return data.content;\n    }\n\n    async addPrecinctNeighbor(precinctId1, precinctId2) {\n        const response = await this.asyncFetch(this.baseUrl + 'addPrecinctNeighbor?precinctId1='.concat(precinctId1) + '&precinctId2='.concat(precinctId2));\n\n        if (response.status != \"ok\") {\n            console.log(response);\n            alert(\"server error : unable to add\" + precinctId1 + \" and \" + precinctId2 + \" as neighbor\");\n            return\n        }\n\n        return response;\n    }\n\n    async deletePrecinctNeighbor(precinctId1, precinctId2) {\n        const response = await this.asyncFetch(this.baseUrl + 'deletePrecinctNeighbor?precinctId1='.concat(precinctId1) + '&precinctId2='.concat(precinctId2));\n\n        if (response.status != \"ok\") {\n            console.log(response);\n            alert(\"server error : unable to delete\" + precinctId1 + \" and \" + precinctId2 + \" as neighbor\");\n            return\n        }\n\n        return response;\n    }\n\n    async mergePrecinct(precinctId1, precinctId2) {\n        const response = await this.asyncFetch(this.baseUrl + 'mergePrecinct?precinctId1='.concat(precinctId1) + '&precinctId2='.concat(precinctId2));\n\n        if (response.status != \"ok\") {\n            console.log(response);\n            alert(\"server error : unable to merge\" + precinctId1 + \" and \" + precinctId2);\n            return\n        }\n\n        return response;\n    }\n\n    async fetchAllPrecinctError() {\n        const data = await this.asyncFetch(this.baseUrl + \"getAllError\");\n\n        if (data.status != \"ok\") {\n            console.log(data);\n            alert(\"server error : unable to get precinctErrors\");\n            return\n        }\n\n        return data.content;\n    }\n\n}\n\nexport default AppData;","export const countyDataLayerFillable = {\n    id: 'countyFill',\n    type: 'fill',\n    paint: {\n        'fill-color': '#0779e4',\n        'fill-opacity': [\n            'case',\n            ['boolean', ['feature-state', 'hover'], false],\n            0.6,\n            0.3\n        ]\n    },\n};\n\nexport const countyDataLayerOutline = {\n    id: 'countyOutline',\n    type: 'line',\n    paint: {\n        'line-color': '#000000',\n        'line-width': 2,\n        'line-opacity': 0.4\n    },\n    layout: {\n        'line-join': 'round'\n    }\n};\n\nexport const countyDataLayerFillableHighlight = {\n    id: 'countyFillHighlighted',\n    type: 'fill',\n    source: 'countyFill',\n    paint: {\n        'fill-color': 'rgba(66, 135, 245, 0.5)',\n    },\n};","export const stateLayerFill = {\n    id: 'stateFill',\n    type: 'fill',\n    paint: {\n        'fill-color': '#0779e4',\n        'fill-opacity': [\n            'case',\n            ['boolean', ['feature-state', 'hover'], false],\n            .75,\n            0.5\n        ]\n    },\n};\n\nexport const stateLayerOutline = {\n    id: 'stateOutline',\n    type: 'line',\n    paint: {\n        'line-color': '#000000',\n        'line-width': 2,\n        //'line-dasharray': [1, 0.5, 1],\n        'line-opacity': 0.4\n    },\n    layout: {\n        'line-join': 'round'\n    }\n};\n\nexport const stateLayerFillHighlight = {\n    id: 'stateFillHighlighted',\n    type: 'fill',\n    source: 'stateFill',\n    paint: {\n        'fill-color': 'rgba(66, 135, 245, 0.5)',\n    },\n};","// precinct red #900c3f' = rgb(144, 12, 63)\n\nexport const precinctLayerFill = {\n    id: 'precinctFill',\n    type: 'fill',\n    paint: {\n        //'fill-color': ['case', ['boolean', ['feature-state', 'neighbor'], false], '#61366C', '#900c3f'],\n        'fill-color': ['case',\n            ['boolean', ['feature-state', 'neighbor'], false],\n            'rgba(144, 12, 63, 0.9)',\n            ['boolean', ['feature-state', 'selected'], false],\n            'rgba(144, 12, 63, 1.0)',\n            'rgba(144, 12, 63, 0.8)'],\n        'fill-opacity':\n            ['case',\n                ['boolean', ['feature-state', 'selected'], false],\n                0.9,\n                ['boolean', ['feature-state', 'hover'], false],\n                0.8,\n                ['boolean', ['feature-state', 'neighbor'], false],\n                0.6,\n                0.4\n            ]\n    }\n};\n\nexport const precinctLayerOutline = {\n    id: 'precinctOutline',\n    //source: 'precinctFill',\n    type: 'line',\n    paint: {\n        'line-color': '#000000',\n        //'line-color': ['case', ['boolean', ['feature-state', 'neighbor'], false], '#FFFFFF', '#000000'],\n        'line-opacity': 0.5,\n        'line-width': 2\n        //'line-width': ['case', ['boolean', ['feature-state', 'neighbor'], false], 5, 2],\n    },\n    layout: {\n        'line-join': 'round'\n    }\n};\n\nexport const precinctLayerFillHighlight = {\n    id: 'precinctFillHighlighted',\n    type: 'fill',\n    source: 'precinctFill',\n    paint: {\n        'fill-color': 'rgba(66, 135, 245, 0.5)',\n    },\n};","export const congressionalLayerFill = {\n    id: 'congressionalFill',\n    type: 'fill',\n    paint: {\n        'fill-color': '#27496d',\n        'fill-opacity': [\n            'case',\n            ['boolean', ['feature-state', 'hover'], false],\n            0.6,\n            0.4\n        ]\n    },\n};\n\nexport const congressionalLayerOutline = {\n    id: 'congressionalOutline',\n    type: 'line',\n    paint: {\n        'line-color': '#FFFFFF',\n        'line-width': 4,\n        //'line-dasharray': [2, 1, 2],\n        'line-opacity': 0.5,\n        //'line-gap-width': 0.5\n    },\n    layout: {\n        'line-join': 'round'\n    }\n};\n\nexport const congressionalLayerFillHighlight = {\n    id: 'congressionalFillHighlighted',\n    type: 'fill',\n    source: 'congressionalFill',\n    paint: {\n        'fill-color': 'rgba(66, 135, 245, 0.5)',\n    },\n};","export const nationalParkLayerFill = {\n    id: 'parkFill',\n    type: 'fill',\n    paint: {\n        'fill-color': 'rgb(34, 139, 34)',\n        'fill-opacity': [\n            'case',\n            ['boolean', ['feature-state', 'hover'], false],\n            0.9,\n            0.7\n        ]\n    },\n};\n\nexport const nationalParkLayerOutline = {\n    id: 'parkOutline',\n    type: 'line',\n    paint: {\n        'line-color': '#000000',\n        'line-width': 2,\n        //'line-dasharray': [1, 0.5, 1],\n        'line-opacity': 0.6\n    },\n    layout: {\n        'line-join': 'round'\n    }\n};","import React, { PureComponent } from 'react';\nimport { Marker } from 'react-map-gl';\nimport { precinctLayerFill } from '../../layers/PrecinctLayer';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst SIZE = 20;\n\n// Important for perf: the markers never change, avoid rerender when the map viewport changes\n/**\n * @props appData : API\n * @props shouldShowPins\n * @props mapRef : map\n * @props allErrors : callback for apps to handle the errors\n */\nexport default class Pins extends PureComponent {\n\n    // getAllErrors() {\n    //     this.props.appData.fetchAllPrecinctError().then((data) => {\n    //         console.log(data);\n    //         let precinctId = [];\n    //         for (let i in data) {\n    //             if (data[i].precinctId) {\n    //                 precinctId.push(data[i].precinctId);\n    //             }\n    //         }\n    //     });\n    // }\n\n    render() {\n        //this.getAllErrors();\n        const { data, onClick, shouldShowPins } = this.props;\n        console.log(shouldShowPins);\n        if (shouldShowPins) {\n            console.log(\"should show pins\");\n            return data.map((city, index) => (\n                <Marker key={`marker-${index}`} longitude={city.longitude} latitude={city.latitude}>\n                    <svg\n                        height={SIZE}\n                        viewBox=\"0 0 24 24\"\n                        style={{\n                            cursor: 'pointer',\n                            fill: '#d00',\n                            stroke: 'none',\n                            transform: `translate(${-SIZE / 2}px,${-SIZE}px)`\n                        }}\n                        onClick={() => onClick(city)}\n                    >\n                        <path d={ICON} />\n                    </svg>\n                </Marker>\n            ));\n        } else {\n            return (<span></span>);\n        }\n\n    }\n}","import React, { PureComponent } from 'react';\n\nexport default class ErrorInfo extends PureComponent {\n    render() {\n        const { info } = this.props;\n\n        return (\n            <div>\n                <h3>Map Error</h3>\n                <br />\n                <p style={{ textAlign: 'left' }}>\n                    Type: {info.type}\n                    <br />\n                    Source: {info.from}\n                </p>\n            </div >\n        );\n    }\n}","import React, { Component } from \"react\";\n\nimport Dropdown from \"react-bootstrap/Dropdown\";\n\nclass StateSelector extends Component {\n  render() {\n    return (\n      <Dropdown>\n        <Dropdown.Toggle variant=\"info\" id=\"dropdown-basic\">\n          Select State\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          <Dropdown.Item\n            href=\"#/NewYork\"\n            onClick={this.props.select_state(\"NY\")}\n          >\n            New York\n          </Dropdown.Item>\n          <Dropdown.Item href=\"#/Utah\" onClick={this.props.select_state(\"UT\")}>\n            Utah\n          </Dropdown.Item>\n          <Dropdown.Item\n            href=\"#/Wisconsin\"\n            onClick={this.props.select_state(\"WI\")}\n          >\n            Wisconsin\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n  }\n}\n\nexport default StateSelector;\n","import React, { Component } from 'react';\n\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\n\n\nclass ElectionDisplayBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            votingData: props.votingData,\n            election: 2016,\n            presidental: undefined,\n            congressional: undefined\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.votingData !== prevState.votingData) {\n            return {\n                votingData: nextProps.votingData,\n                presidental: undefined,\n                congressional: undefined\n            };\n        }\n        else {\n            return null;\n        }\n    }\n\n    getAllElection() {\n        let elections = this.state.votingData;\n        if (elections === undefined) {\n            return undefined;\n        }\n        else {\n            let allElections = Object.keys(elections.electionData);\n            if (allElections.length === 0) {\n                return undefined;\n            }\n            else {\n                return allElections;\n            }\n        }\n    }\n\n    getResults(year) {\n        let elections = this.state.votingData;\n        if (elections === undefined) {\n\n        }\n        else {\n            let allElections = Object.keys(elections.electionData);\n            let electionInYear = [];\n            for (let i in allElections) {\n                if (allElections[i].includes(year.toString())) {\n                    electionInYear.push(allElections[i]);\n                }\n            }\n\n            let ans = {};\n            let result = elections.electionData;\n            for (let i in electionInYear) {\n                ans[electionInYear[i]] = result[electionInYear[i]].resultsByParty;\n            }\n            return ans;\n        }\n    }\n\n    changeElection(year) {\n        let resultInYear = this.getResults(year);\n        let resultInYearKey = Object.keys(resultInYear);\n        this.setState({\n            election: year,\n            presidental: undefined,\n            congressional: undefined\n        });\n        for (let i in resultInYearKey) {\n            if (resultInYearKey[i].includes(\"PRES\")) {\n                this.setState({\n                    presidental: resultInYear[resultInYearKey[i]]\n                });\n            }\n            else if (resultInYearKey[i].includes(\"CONG\"))\n                this.setState({\n                    congressional: resultInYear[resultInYearKey[i]]\n                });\n        }\n    }\n\n    yearButtons(allElection) {\n        if (allElection) {\n            let years = [];\n            for (let i in allElection) {\n                let year = allElection[i].substring(4, 9);\n                if (!years.includes(year)) {\n                    years.push(year);\n                }\n            }\n\n            let buttonList = [];\n            for (let i in years) {\n                buttonList.push(<Button variant=\"outline-primary\" id={\"btn\" + i.toString()} className=\"button\" onClick={this.changeElection.bind(this, parseInt(years[i]))}>{years[i]}</Button>);\n            }\n            return buttonList;\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    render() {\n        let allElection = this.getAllElection();\n        if (allElection !== undefined && (this.state.presidental === undefined && this.state.congressional === undefined)) {\n            this.changeElection(allElection[0].substring(4, 9));\n        }\n\n        const { presidental } = this.state;\n        const { congressional } = this.state;\n\n        if (presidental !== undefined && congressional !== undefined) {\n            return (\n                <div>\n                    <ButtonGroup size=\"sm\" className=\"mt-3\">\n                        {this.yearButtons(allElection)}\n                    </ButtonGroup>\n                    <br />\n                    <hr />\n                    Presidential:\n                    <div className=\"BarDisplay\">\n                        <div className=\"BlueBar Demographic\" style={{ width: presidental[\"DEMOCRAT\"] + '%' }}>\n                            {'Democrat\\n' + presidental[\"DEMOCRAT\"]}\n                        </div>\n                        <div className=\"RedBar Replublican\" style={{ width: presidental[\"REPUBLICAN\"] + '%' }}>\n                            {'Republican\\n' + presidental[\"REPUBLICAN\"]}\n                        </div>\n                        <div className=\"GreenBar Libratarian\" style={{ width: presidental[\"LIBRATARIAN\"] + '%' }}>\n                            {'Libratarian\\n' + presidental[\"LIBRATARIAN\"]}\n                        </div>\n                        <div className=\"YellowBar Other\" style={{ width: presidental[\"OTHER\"] + '%' }}>\n                            {'Other\\n' + presidental[\"OTHER\"]}\n                        </div>\n                    </div>\n                    <br />\n                    <hr />\n                    Congressional:\n                    <div className=\"BarDisplay\">\n                        <div className=\"BlueBar Demographic\" style={{ width: congressional[\"DEMOCRAT\"] + '%' }}>\n                            {'Democrat\\n' + congressional[\"DEMOCRAT\"]}\n                        </div>\n                        <div className=\"RedBar Replublican\" style={{ width: congressional[\"REPUBLICAN\"] + '%' }}>\n                            {'Republican\\n' + congressional[\"REPUBLICAN\"]}\n                        </div>\n                        <div className=\"GreenBar Libratarian\" style={{ width: congressional[\"LIBRATARIAN\"] + '%' }}>\n                            {'Libratarian\\n' + congressional[\"LIBRATARIAN\"]}\n                        </div>\n                        <div className=\"YellowBar Other\" style={{ width: congressional[\"OTHER\"] + '%' }}>\n                            {'Other\\n' + congressional[\"OTHER\"]}\n                        </div>\n                    </div>\n                    <a className=\"dataSource\" href=\"https://electionlab.mit.edu/data\">source</a>\n                </div>\n            );\n        }\n        else if (presidental !== undefined && congressional === undefined) {\n            return (\n                <div>\n                    <ButtonGroup size=\"sm\" className=\"mt-3\">\n                        {this.yearButtons(allElection)}\n                    </ButtonGroup>\n                    <br />\n                    <hr />\n                    Presidential:\n                    <div className=\"BarDisplay\">\n                        <div className=\"BlueBar Demographic\" style={{ width: presidental[\"DEMOCRAT\"] + '%' }}>\n                            {'Democrat\\n' + presidental[\"DEMOCRAT\"]}\n                        </div>\n                        <div className=\"RedBar Replublican\" style={{ width: presidental[\"REPUBLICAN\"] + '%' }}>\n                            {'Republican\\n' + presidental[\"REPUBLICAN\"]}\n                        </div>\n                        <div className=\"GreenBar Libratarian\" style={{ width: presidental[\"LIBRATARIAN\"] + '%' }}>\n                            {'Libratarian\\n' + presidental[\"LIBRATARIAN\"]}\n                        </div>\n                        <div className=\"YellowBar Other\" style={{ width: presidental[\"OTHER\"] + '%' }}>\n                            {'Other\\n' + presidental[\"OTHER\"]}\n                        </div>\n                    </div>\n                    <a className=\"dataSource\" href=\"https://electionlab.mit.edu/data\">source</a>\n                </div>\n            );\n        }\n        else if (presidental === undefined && congressional !== undefined) {\n            return (\n                <div>\n                    <ButtonGroup size=\"sm\" className=\"mt-3\">\n                        {this.yearButtons(allElection)}\n                    </ButtonGroup>\n                    <br />\n                    <hr />\n                    Congressional:\n                    <div className=\"BarDisplay\">\n                        <div className=\"BlueBar Demographic\" style={{ width: congressional[\"DEMOCRAT\"] + '%' }}>\n                            {'Democrat\\n' + congressional[\"DEMOCRAT\"]}\n                        </div>\n                        <div className=\"RedBar Replublican\" style={{ width: congressional[\"REPUBLICAN\"] + '%' }}>\n                            {'Republican\\n' + congressional[\"REPUBLICAN\"]}\n                        </div>\n                        <div className=\"GreenBar Libratarian\" style={{ width: congressional[\"LIBRATARIAN\"] + '%' }}>\n                            {'Libratarian\\n' + congressional[\"LIBRATARIAN\"]}\n                        </div>\n                        <div className=\"YellowBar Other\" style={{ width: congressional[\"OTHER\"] + '%' }}>\n                            {'Other\\n' + congressional[\"OTHER\"]}\n                        </div>\n                    </div>\n                    <a className=\"dataSource\" href=\"https://electionlab.mit.edu/data\">source</a>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div>\n                    No ElectionData\n                </div>\n            );\n        }\n    }\n}\n\nexport default ElectionDisplayBar;","import React, { PureComponent } from 'react';\n\nimport Table from 'react-bootstrap/Table';\n\n/**\n * @prop demogrpahicData: demographicData\n * \n */\nclass DemographicsTable extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.total = 0;\n    }\n\n    calculateTotal() {\n        if (this.props.demographicData) {\n            let total = 0;\n            let value = this.props.demographicData.demographic;\n            for (let i in value) {\n                total += value[i];\n            }\n            this.total = total\n        }\n    }\n\n    getPopulation(race) {\n        if (this.props.demographicData) {\n            let demographic = this.props.demographicData.demographic;\n            return demographic[race];\n        }\n        else {\n            return 0;\n        }\n\n    }\n\n    getPercentage(race) {\n        if (this.props.demographicData) {\n            let demographic = this.props.demographicData.demographic;\n            if (demographic[race] === 0) {\n                return 0;\n            }\n            else {\n                return (demographic[race] / this.state.total) * 100;\n            }\n        }\n        else {\n            return 0;\n        }\n\n    }\n\n\n    render() {\n        this.calculateTotal();\n        //console.log(this.props.demographicData);\n        return (\n            <div>\n                <Table striped bordered hover size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Race</th>\n                            <th>Num</th>\n                            {/* <th>Percent</th> */}\n                        </tr>\n                    </thead>\n                    <tbody className=\"text-left\">\n                        <tr>\n                            <th>White</th>\n                            <td>{this.getPopulation(\"WHITE\")}</td>\n                            {/* <td>{this.getPercentage(\"WHITE\")}%</td> */}\n                        </tr>\n                        <tr>\n                            <th>Black</th>\n                            <td>{this.getPopulation(\"BLACK\")}</td>\n                            {/* <td>{this.getPercentage(\"BLACK\")}%</td> */}\n                        </tr>\n                        <tr>\n                            <th>Native_American</th>\n                            <td>{this.getPopulation(\"NATIVE_AMERICAN\")}</td>\n                            {/* <td>{this.getPercentage(\"NATIVE_AMERICAN\")}%</td> */}\n                        </tr>\n                        <tr>\n                            <th>Asian</th>\n                            <td>{this.getPopulation(\"ASIAN\")}</td>\n                            {/* <td>{this.getPercentage(\"ASIAN\")}%</td> */}\n                        </tr>\n                        <tr>\n                            <th>Native_Hawaiian</th>\n                            <td>{this.getPopulation(\"NATIVE_HAWAIIAN\")}</td>\n                            {/* <td>{this.getPercentage(\"NATIVE_HAWAIIAN\")}%</td> */}\n                        </tr>\n                        <tr>\n                            <th>Other</th>\n                            <td>{this.getPopulation(\"OTHER\")}</td>\n                            {/* <td>{this.getPercentage(\"OTHER\")}%</td> */}\n                        </tr>\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <th colSpan=\"1\">Total Population</th>\n                            <td>{this.total}</td>\n                            {/* <td>100%</td> */}\n                        </tr>\n                    </tfoot>\n                </Table>\n                <a className=\"dataSource\" href=\"https://electionlab.mit.edu/data\">source</a>\n            </div>\n        );\n    }\n}\n\nexport default DemographicsTable;","import React, { Component } from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form'\n\n\n\nclass DataCorrectionPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    save_changes() {\n        this.dismiss();\n    }\n\n    dismiss() {\n        this.props.data_correction_page_status(\"done\");\n    }\n\n\n    render() {\n        return (\n            <div className=\"data_correction_page\">\n                <h4>Data Correction Form</h4>\n                <Form>\n                    <Form.Group controlId=\"data_correction.target_data\">\n                        <Form.Label>Data for correction</Form.Label>\n                        <Form.Control as=\"select\">\n                            <option>Demographic</option>\n                            <option>Election</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"data_correction.value\">\n                        <Form.Label>Changed Value</Form.Label>\n                        <Form.Control type=\"value\" placeholder=\"Please enter corrected data\" />\n                    </Form.Group>\n                </Form>\n                <div className=\"data_correction_Btns\">\n                    <Button variant=\"outline-primary\" id=\"data_change\" onClick={() => { this.save_changes() }}>Change</Button>\n                    <Button variant=\"outline-primary\" id=\"data_change_cancel\" onClick={() => { this.dismiss() }}>Cancel</Button>\n                </div>\n                <br />\n            </div>\n        );\n    }\n}\n\nexport default DataCorrectionPage;","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button'\n\n\n/**\n * @props selectedFeature = currentSelectedFeature from Apps\n * @props modify_neighbors_page_status = callback for sending PrecinctSelectionMode for Apps\n * @props precinctSelectedForEdit = a precinct that user selected for editions \n * @props appData = API\n */\nclass ModifyNeighbors extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: \"default\",\n            dynamicAddNeighbor: false\n        }\n    }\n\n    getAllNeighbors() {\n        let currentFeature = this.props.selectedFeature;\n        let neighbors = currentFeature.properties.neighborsId;\n        let r = [];\n        for (let i in neighbors) {\n            r.push(<li>{neighbors[i]}</li>);\n        }\n        return r;\n    }\n\n    switchMode(mode) {\n        this.setState({\n            mode: mode\n        });\n        this.props.modify_neighbors_page_status(mode);\n    }\n\n\n    saveAction() {\n        let mode = this.state.mode;\n        let targetPrecinct = this.props.selectedFeature.id;\n        let precinctsForEdit = this.props.precinctSelectedForEdit;\n        if (mode === \"add\") {\n            this.setState({\n                mode: \"default\"\n            });\n            if (precinctsForEdit) {\n                this.props.appData.addPrecinctNeighbor(targetPrecinct, precinctsForEdit).then((respond) => {\n                    console.log(respond);\n                    this.dynamicAddNeighborId(precinctsForEdit);\n                    this.forceUpdate();\n                });\n            }\n            this.props.modify_neighbors_page_status(\"default\");\n        }\n        else {\n            this.setState({\n                mode: \"default\"\n            });\n            if (precinctsForEdit) {\n                this.props.appData.deletePrecinctNeighbor(targetPrecinct, precinctsForEdit).then((respond) => {\n                    console.log(respond);\n                    this.dynamicDeleteNeighborId(precinctsForEdit);\n                    this.forceUpdate();\n                });\n            }\n            this.props.modify_neighbors_page_status(\"default\");\n        }\n    }\n\n    dynamicAddNeighborId(newId) {\n        this.props.selectedFeature.properties.neighborsId.push(newId.toString().trim());\n    }\n\n    dynamicDeleteNeighborId(deletedId) {\n        let oldNeighbors = this.props.selectedFeature.properties.neighborsId;\n        let newNeighbors = [];\n        for (let i in oldNeighbors) {\n            if (oldNeighbors[i].toString().trim() !== deletedId.toString().trim()) {\n                newNeighbors.push(oldNeighbors[i]);\n            }\n        }\n        this.props.selectedFeature.properties.neighborsId = newNeighbors;\n    }\n\n    render() {\n        const { mode } = this.state;\n        if (mode === \"default\") {\n            return (\n                <div>\n                    <br />\n                    <Button id=\"addButton\" variant=\"primary\" onClick={(evt) => { this.switchMode(\"add\") }}>Add Neighbor</Button>\n                    <br />\n                    <Button id=\"deleteButton\" variant=\"danger\" onClick={(evt) => { this.switchMode(\"delete\") }}>Delete Neighbor</Button>\n                    <br />\n                    <hr />\n                    <h5>Current Neighbors</h5>\n                    <div>\n                        <ul>{this.getAllNeighbors()}</ul>\n                    </div>\n                    <br />\n                </div>\n            );\n        }\n        else if (mode === \"add\") {\n            return (\n                <div>\n                    <br />\n                    <h5>Add Nieghbors</h5>\n                    <hr />\n                    <p>Please select precincts from the map to add as neighbor</p>\n                    <hr />\n                    <span>Current Selected Precincts</span>\n                    <ul>\n                        <li>{this.props.precinctSelectedForEdit}</li>\n                    </ul>\n                    <hr />\n                    <Button id=\"saveButton_add\" variant=\"success\" onClick={(evt) => { this.saveAction() }}>Save Changes</Button>\n                    <br />\n                </div >\n            );\n        }\n        else if (mode === \"delete\") {\n            return (\n                <div>\n                    <br />\n                    <h5>Delete Nieghbors</h5>\n                    <hr />\n                    <p>Please select neighbors from the map to delete</p>\n                    <hr />\n                    <span>Current Selected Precincts</span>\n                    <ul>\n                        <li>{this.props.precinctSelectedForEdit}</li>\n                    </ul>\n                    <hr />\n                    <Button id=\"saveButton_del\" variant=\"success\" onClick={(evt) => { this.saveAction() }}>Save Changes</Button>\n                    <br />\n                </div>\n            );\n        }\n    }\n\n}\n\nexport default ModifyNeighbors;","import React, { Component } from 'react';\nimport Card from 'react-bootstrap/Card';\n\nclass Comments extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            comments: []\n        };\n    }\n\n    componentDidMount() {\n        this.get_comments();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.savedCommentData !== this.props.savedCommentData) {\n            this.get_saved_comments();\n        }\n    }\n\n    //Dynamically shows saved comments from comment modal\n    get_saved_comments() {\n        console.log(\"________________\", this.props.savedCommentData)\n        if (this.props.savedCommentData) {\n            this.setState((state) => {\n                let new_comments = state.comments;\n                new_comments.push(this.props.savedCommentData);\n                return { comments: new_comments }\n            });\n        }\n    }\n\n    // this is just for the presentation\n    get_comments() {\n        let numComments = Math.ceil(Math.random() * 3);\n        let commenter = [\"David\", \"Ilan\", \"Reed\", \"Sam\"];\n        let content = [\"Some comment about changing the election data b/c old source was invalid.\", \"Some comment about undoing the yesterdays changes done to the boundaries of the Albany county of NY.\", \"Some test comment.\", \"Another test comment.\"];\n        let comments = [];\n        for (let i = 0; i < numComments; i++) {\n            let comment = {\n                commenter: commenter[Math.round(Math.random() * 3)],\n                content: content[Math.round(Math.random() * 3)]\n            }\n            comments.push(comment);\n        }\n        this.setState({ comments: comments });\n    }\n\n    render() {\n        const { comments } = this.state;\n        const displayed_comments = [];\n        for (let i in comments) {\n            displayed_comments.push(\n                <Card>\n                    <Card.Body>\n                        {comments[i].commenter}{\": \"}{comments[i].content}\n                    </Card.Body>\n                </Card>\n            );\n        }\n\n        return (\n            <div >\n                {displayed_comments}\n            </div >\n        );\n    }\n}\n\nexport default Comments;","import React, { Component } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nclass CommentModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false\n        };\n    }\n\n    //display is boolean\n    handle_modal_display(display) {\n        this.setState({ show: display });\n    }\n\n    saveCommentData(user, text) {\n        let comment_data = {\n            commenter: user,\n            content: text\n        };\n        this.props.savedCommentData(comment_data);\n    }\n\n    render() {\n        const { show } = this.state;\n        return (\n            <div>\n                <Button variant=\"primary\" onClick={() => { this.handle_modal_display(true) }}>Create Comment</Button>\n                <Modal show={show} onHide={() => { this.handle_modal_display(false) }}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Enter comment</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <input id=\"commentModalInput\" placeholder=\" Please enter your comments here\"></input>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={() => { this.handle_modal_display(false) }}>Cancel</Button>\n                        <Button variant=\"primary\" onClick={() => {\n                            this.handle_modal_display(false);\n                            this.saveCommentData(\"User\", document.getElementById(\"commentModalInput\").value);\n                        }}>Save Comment</Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default CommentModal;","import React, { Component } from 'react';\n\nimport Button from 'react-bootstrap/Button'\n\n\n/**\n * @props selectedFeature = currentSelectedFeature from Apps\n * @props precinctSelectedForEdit = a precinct that user selected for editions \n * @props appData = API\n */\nclass MergePrecinct extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    mergeAction() {\n        let precinctsForEdit = this.props.precinctSelectedForEdit;\n        if (precinctsForEdit) {\n            alert(\"Merge\" + this.props.selectedFeature + \" and \" + precinctsForEdit);\n            this.props.appData.mergePrecinct(11790, 11791);\n        }\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <br />\n                <p>Please select a precinct on map to merge</p>\n                <hr />\n                <ul>\n                    <li>{this.props.precinctSelectedForEdit}</li>\n                </ul>\n                <hr />\n                <Button id=\"mergeBtn\" variant=\"success\" onClick={(evt) => { this.mergeAction() }}>MergePrecinct</Button>\n            </div >\n        );\n    }\n}\n\nexport default MergePrecinct;","import React, { Component } from 'react';\n\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\n\n/**\n * @props appData : api\n */\nclass MapErrors extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedErrorType: \"GHOST\",\n            selectedFeature: null\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.selectedFeature !== prevState.selectedFeature) {\n            return ({\n                selectedFeature: nextProps.selectedFeature\n            });\n        }\n    }\n\n    // createErrorList() {\n    //     let allError = this.props.allErrors;\n    //     let errorList = [];\n    //     for (let i in allError) {\n    //         errorList.push(<ListGroup.Item onClick={() => this.props.errorListOnClick(allError[i])}> {allError[i].errorType + \" \" + allError[i].precinctId}</ListGroup.Item >);\n    //     }\n    //     return errorList;\n    // }\n\n    changeErrorType(type) {\n        this.setState({\n            selectedErrorType: type\n        });\n    }\n\n    getErrorInState(stateId) {\n        let ny = 36;\n        let wn = 55;\n        let utah = 49;\n        let allError = this.props.allErrors;\n        let filteredErrors = [];\n        for (let i in allError) {\n            if (allError[i].precinctId.slice(0, 2) === stateId) {\n                filteredErrors.push(allError[i]);\n            }\n        }\n        return filteredErrors;\n    }\n\n    createErrorListByType() {\n        let selectedFeature = this.props.selectedFeature;\n        let allError;\n        if (selectedFeature) {\n            let stateId = selectedFeature.id.toString().slice(0, 2);\n            allError = this.getErrorInState(stateId);\n        }\n        let errorList = [];\n        let selectedErrorType = this.state.selectedErrorType;\n        if (selectedErrorType === \"All\") {\n            for (let i in allError) {\n                errorList.push(<ListGroup.Item onClick={() => this.props.errorListOnClick(allError[i])}> {allError[i].errorType + \" \" + allError[i].precinctId}</ListGroup.Item >);\n            }\n        }\n        else if (selectedErrorType === \"NO_VOTER\") {\n            for (let i in allError) {\n                if (allError[i].errorType === \"NO_VOTER\") {\n                    errorList.push(<ListGroup.Item onClick={() => this.props.errorListOnClick(allError[i])}> {allError[i].errorType + \" \" + allError[i].precinctId}</ListGroup.Item >);\n                }\n            }\n        }\n        else if (selectedErrorType === \"NO_DEMOGRAPIHIC\") {\n            for (let i in allError) {\n                if (allError[i].errorType === \"NO_DEMOGRAPIHIC\") {\n                    errorList.push(<ListGroup.Item onClick={() => this.props.errorListOnClick(allError[i])}> {allError[i].errorType + \" \" + allError[i].precinctId}</ListGroup.Item >);\n\n                }\n            }\n        }\n        else if (selectedErrorType === \"GHOST\") {\n            for (let i in allError) {\n                if (allError[i].errorType === \"GHOST\") {\n                    errorList.push(<ListGroup.Item onClick={() => this.props.errorListOnClick(allError[i])}> {allError[i].errorType + \" \" + allError[i].precinctId}</ListGroup.Item >);\n                }\n            }\n        }\n        else if (selectedErrorType === \"OVERLAP\") {\n            for (let i in allError) {\n                if (allError[i].errorType === \"OVERLAP\") {\n                    errorList.push(<ListGroup.Item onClick={() => this.props.errorListOnClick(allError[i])}> {allError[i].errorType + \" \" + allError[i].precinctId}</ListGroup.Item >);\n                }\n            }\n        }\n        else if (selectedErrorType === \"INTERSECTING\") {\n            for (let i in allError) {\n                if (allError[i].errorType === \"INTERSECTING\") {\n                    errorList.push(<ListGroup.Item onClick={() => this.props.errorListOnClick(allError[i])}> {allError[i].errorType + \" \" + allError[i].precinctId}</ListGroup.Item >);\n                }\n            }\n        }\n        return errorList;\n    }\n\n    render() {\n        return (\n            <div>\n                Errors\n                <hr />\n                <DropdownButton title={this.state.selectedErrorType}>\n                    <Dropdown.Item as=\"button\" onClick={() => this.changeErrorType(\"All\")}>All</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => this.changeErrorType(\"NO_VOTER\")} > No voters</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => this.changeErrorType(\"NO_DEMOGRAPIHIC\")} > No demographic</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => this.changeErrorType(\"GHOST\")}> Ghost</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => this.changeErrorType(\"OVERLAP\")} > Overlap</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => this.changeErrorType(\"INTERSECTING\")}> Intersecting</Dropdown.Item>\n                </DropdownButton>\n                <ListGroup>\n                    {this.createErrorListByType()}\n                </ListGroup>\n                <hr />\n            </div >\n\n        );\n    }\n}\nexport default MapErrors;","import React, { Component } from 'react';\n\nimport Collapsible from 'react-collapsible';\n\nimport ElectionDisplayBar from './ElectionDisplayBar';\nimport DemographicsTable from './DemographicsTable';\nimport DataCorrectionPage from './DataCorrectionPage';\nimport ModifyNeighbors from './ModifyNeighbors';\nimport Comments from './Comments';\nimport CommentModal from './CommentModal';\nimport MergePrecinct from './MergePrecinct';\nimport MapErrors from './MapErrors';\n/**\n * Our sidebar component\n * @props selected: the currently selected map feature\n * @props showErrorPins: function to show or hide error pins\n * @props userMode :  current user mode\n * @props leftSideBarStatus : for returning status of the leftSideBar\n * @props precinctSelectedForEdit : a precinct that user selected for editions \n * @props appData : API\n */\nclass LeftSidebar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: \"data_display\",\n            comment_data: undefined\n        }\n    }\n\n    createList = () => {\n        let list = [];\n        //console.log(this.props.selected);\n        const feature = this.props.selected; //the selected feature\n        if (feature) {\n            const properties = feature.properties;\n            for (const p in properties) {\n                if (p !== \"demographicData\" && p !== \"precinctError\" && p !== \"votingData\") {\n                    list.push(<div className=\"text-left\">{`${p}: ${properties[p]}`}</div>);\n                }\n            }\n            // list.push(<div>State: {properties['name']}</div>);\n        }\n        return list;\n    }\n\n    //For data correction page to return page_status\n    get_data_correction_page_status = (page_status) => {\n        if (page_status === \"done\") {\n            this.setState({ mode: \"data_display\" });\n        }\n    }\n\n    get_modify_neighbors_page_status = (page_status) => {\n        if (page_status !== \"default\") {\n            // send the precinct Selection Mode back to the Apps\n            this.props.leftSideBarStatus(\"precinct_selection_to_edit\");\n        }\n        else if (page_status === \"default\") {\n            this.props.leftSideBarStatus(\"saveRequested\");\n        }\n        else {\n            this.props.leftSideBarStatus()\n        }\n    }\n\n    get_mapErrorList_onClick = (errorData) => {\n        this.props.errorListOnClick(errorData);\n    }\n\n    get_comments_modal_data = (comment_modal_data) => {\n        if (comment_modal_data) {\n            this.setState({ comment_data: comment_modal_data });\n        }\n    }\n\n    _handleClick = event => {\n        this.props.showErrorPins();\n    }\n\n    // makeHeader() {\n    //     const feature = this.props.selected;\n\n    //     if (feature && feature.properties && feature.properties.type) {\n    //         //let name = feature.properties.name || feature.properties.NAME || feature.properties.GEOID10 || feature.properties.NAMELSAD\n    //         let type = feature.properties.type;\n    //     }\n    // }\n\n    render() {\n        // const { mode } = this.state;\n        const { userMode } = this.props;\n        const { comment_data } = this.state;\n        const list = this.createList();\n        let selectedFeatureType = this.props.selected ? this.props.selected.properties.type : undefined;\n        const selectedFeature = this.props.selected;\n\n        let keys = 0;\n\n        if (list.length > 0) {\n            if (userMode === \"View\") {\n                return (\n                    <div style={{ textAlign: 'left' }}>\n                        <Collapsible trigger=\"General Info\" open={true}>\n                            <div style={{ marginLeft: '5px' }}>\n                                {list}\n                            </div>\n                        </Collapsible>\n                        <Collapsible trigger=\"Elections\">\n                            {(selectedFeature.properties.type === \"Precinct\" && <ElectionDisplayBar\n                                votingData={selectedFeature.properties.votingData}\n                            />) ||\n                                <div>select a precinct to view elections</div>}\n                        </Collapsible>\n                        <Collapsible trigger=\"Demographics\">\n                            {(selectedFeature.properties.type === \"Precinct\" && <DemographicsTable\n                                demographicData={selectedFeature.properties.demographicData}\n                            />) ||\n                                <div>select a precinct to view demographics</div>}\n                        </Collapsible>\n                        {/* <Collapsible trigger=\"Comments\">\n                            <Comments savedCommentData={comment_data} />\n                            <br />\n                            <CommentModal savedCommentData={this.get_comments_modal_data} />\n                            <br />\n                        </Collapsible> */}\n                        <Collapsible trigger=\"Map Errors\">\n                            <MapErrors\n                                selectedFeature={this.props.selected}\n                                allErrors={this.props.allErrors}\n                                errorListOnClick={this.get_mapErrorList_onClick}\n                            />\n                            {/* <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View All</button>\n                            <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View Self Intersecting Boundaries</button>\n                            <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View Open Borders</button>\n                            <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View Gaps in Precinct Coverage</button>\n                            <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View Precinct Multipolygon</button>\n                            <button className=\"Extra-Large-Button\" onClick={this._handleClick}>View Overlapping Precincts</button> */}\n                        </Collapsible>\n                    </div >\n                );\n            }\n            else if (userMode === \"Edit\") {\n                if (selectedFeatureType === \"Precinct\") {\n                    return (\n                        <div >\n                            <Collapsible trigger=\"General Info\" open={true}>\n                                {list}\n                            </Collapsible>\n                            <Collapsible trigger=\"Modify Data\">\n                                <DataCorrectionPage\n                                    data_correction_page_status={this.get_data_correction_page_status}\n                                />\n                            </Collapsible>\n                            <Collapsible trigger=\"Modify Neighbors\" >\n                                <ModifyNeighbors\n                                    selectedFeature={selectedFeature}\n                                    modify_neighbors_page_status={this.get_modify_neighbors_page_status}\n                                    precinctSelectedForEdit={this.props.precinctSelectedForEdit}\n                                    appData={this.props.appData}\n                                />\n                            </Collapsible>\n                            {/* <Collapsible trigger=\"Merge Precinct\" >\n                                <MergePrecinct\n                                    selectedFeature={selectedFeature}\n                                    precinctSelectedForEdit={this.props.precinctSelectedForEdit}\n                                    appData={this.props.appData} />\n                            </Collapsible> */}\n                        </div >\n                    );\n                }\n                else {\n                    return (\n                        <div >\n                            <h5></h5>\n                            <Collapsible trigger=\"General Info\" open={true}>\n                                {list}\n                            </Collapsible>\n                        </div >\n                    );\n                }\n\n            }\n        }\n        return (\n            <div>\n                Click on a highlighted state to view details\n            </div>\n        );\n    }\n}\n\nexport default LeftSidebar;","/* global setTimeout */\nimport React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { EditorModes } from 'react-map-gl-draw';\n\n\nconst MODES = [\n    { id: EditorModes.SELECT, text: 'Edit Feature', icon: 'icon-select.svg' },\n    { id: EditorModes.DRAW_POINT, text: 'Draw Point', icon: 'icon-point.svg' },\n    { id: EditorModes.DRAW_PATH, text: 'Draw Polyline', icon: 'icon-path.svg' },\n    { id: EditorModes.DRAW_POLYGON, text: 'Draw Polygon', icon: 'icon-polygon.svg' },\n    { id: EditorModes.DRAW_RECTANGLE, text: 'Draw Rectangle', icon: 'icon-rectangle.svg' }\n];\n\nconst Container = styled.div`\n  position: absolute;\n//   width: 48px;\n  left: 260px;\n  top: 240px;\n  background: #fff;\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.15);\n  outline: none;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  padding: 0px;\n  margin: 0px;\n`;\n\nconst Row = styled.div`\n  height: 34px;\n  width: 34px;\n  padding: 7px;\n  display: flex;\n  justify-content: left;\n  color: ${props => (props.selected ? '#ffffff' : 'inherit')};\n  background: ${props => (props.selected ? '#0071bc' : props.hovered ? '#e6e6e6' : 'inherit')};\n`;\n\nconst Img = styled.img`\n  max-width: 20px !important;\n`;\n\nconst Tooltip = styled.div`\n  position: absolute;\n  left: 52px;\n  padding: 4px;\n  background: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  min-width: 100px;\n  max-width: 300px;\n  height: 24px;\n  font-size: 12px;\n  z-index: 9;\n  pointer-events: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Delete = styled(Row)`\n  &:hover {\n    background: ${props => (props.selected ? '#0071bc' : '#e6e6e6')};\n  }\n  &:active: {\n    background: ${props => (props.selected ? '#0071bc' : 'inherit')};\n  }\n`;\n\n\n/**\n * @props selectedMode={this.state.selectedMode}\n * @props onSwitchMode={this._switchMode}\n * @props onDelete={this._onDelete}           \n * @props onSelect={this._onSelect}\n * @props features={this.state.features}\n * @props selectedFeature={this.state.selectedFeature}\n * @props toolBarRequest={this._onSaveRequest}\n * \n */\n\nexport default class Toolbar extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            deleting: false,\n            hoveredId: null,\n        };\n    }\n\n    _onHover = evt => {\n        this.setState({ hoveredId: evt && evt.target.id });\n    };\n\n    //TODO probably dont neet to pass the evt \n    _onDelete = () => {\n        this.props.onDelete();\n        this.setState({ deleting: true });\n        setTimeout(() => this.setState({ deleting: false }), 500)\n    };\n\n    _onSaveChange = () => {\n        console.log(this.props.features)\n        this.props.toolBarRequest(this.props.features.data);\n    }\n\n    // checkSelectedFeature() {\n    //     console.log(this.props.selectedFeature, this.props.features)\n    //     let selectedFeature = this.props.selectedFeature;\n    //     if (selectedFeature && selectedFeature.properties.type === \"Precinct\") {\n    //         let selectedFeatureId = selectedFeature.id;\n    //         this.props.appData.fetchPrecinctShape(selectedFeatureId).then((data) => {\n    //             console.log(data);\n    //             this.setState({\n    //                 selectedPrecinctFeature: data.features[0]\n    //             });\n    //         });\n    //     }\n\n    // }\n\n    render() {\n        const { selectedMode } = this.props;\n        const { hoveredId } = this.state;\n        //this.checkSelectedFeature();\n        return (\n            <Container>\n                {MODES.map(m => {\n                    return (\n                        <Row\n                            onClick={this.props.onSwitchMode}\n                            onMouseOver={this._onHover}\n                            onMouseOut={_ => this._onHover(null)}\n                            selected={m.id === selectedMode}\n                            hovered={m.id === hoveredId}\n                            key={m.id}\n                            id={m.id}\n                        >\n                            <Img id={m.id} onMouseOver={this._onHover} src={m.icon} />\n                            {hoveredId === m.id && <Tooltip>{m.text}</Tooltip>}\n                        </Row>\n                    );\n                })}\n                <Delete\n                    selected={this.state.deleting}\n                    onClick={this._onDelete}\n                    onMouseOver={this._onHover}\n                    onMouseOut={_ => this._onHover(null)}\n                >\n                    <Img\n                        id={'delete'}\n                        onMouseOver={this._onHover}\n                        src={'icon-delete.svg'}\n                    />\n                    {hoveredId === 'delete' && <Tooltip>{'Delete'}</Tooltip>}\n                </Delete>\n                <Row\n                    onClick={() => this._onSaveChange()}\n                    onMouseOver={this._onHover}\n                    onMouseOut={_ => this._onHover(null)}\n                    id=\"saveDrawBtn\"\n                ><span style={{ \"fontSize\": \"10px\" }}> save</span></Row>\n            </Container>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nimport Button from \"react-bootstrap/Button\";\n\n/**\n * @prop mergePrecicncts: function to merge the precincts\n * @prop enabled: boolean as to whether merge button enabled\n */\nclass MergeBtn extends Component {\n    render() {\n        const { enabled } = this.props;\n        const btnSize = \"md\";\n        if (enabled) {\n            return (\n                <Button variant=\"success\" size={btnSize} onClick={this.props.mergePrecincts}>\n                    Merge Precincts\n                </Button>\n            )\n        }\n        else {\n            return (\n                <Button variant=\"success\" size={btnSize} disabled>Merge Precincts</Button>\n            )\n        }\n    }\n}\n\nexport default MergeBtn;","import React, { Component } from \"react\";\n\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { toast } from \"react-toastify\";\n\n/**\n * @prop selectedFeature : selectedFeature\n * @prop userModeSelect : call back for selected mode\n */\nclass UserModeSelector extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    // NOTE: Change to \"toggle mode\" which would be a button that shows a toast everytime you toggle mode\n    render() {\n        let selectedFeatureType = this.props.selectedFeature ? this.props.selectedFeature.properties.type : undefined;\n        return (\n            <Dropdown>\n                <Dropdown.Toggle variant=\"info\" id=\"userModeSelect\">\n                    Select Mode\n        </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    <Dropdown.Item onClick={() => this.props.userModeSelect(\"View\")}>\n                        View\n          </Dropdown.Item>\n                    <Dropdown.Item onClick={() => {\n                        this.props.userModeSelect(\"Edit\");\n                        if (selectedFeatureType != \"Precinct\" && selectedFeatureType != undefined) {\n                            toast.info(\"Note: Can only edit precinct\", {\n                                position: toast.POSITION.BOTTOM_RIGHT,\n                            });\n                        }\n                    }} disabled={selectedFeatureType !== \"Precinct\"}>\n                        Edit\n          </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown >\n        );\n    }\n}\n\nexport default UserModeSelector;\n","import React, { Component } from \"react\";\n\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\n\n/**\n * @prop addPrecinctNeighbor: function to add precinct neighbor, passed from App.js\n * @prop removePrecinctNeighbor: function to remove precinct neighbor, passed from App.js\n * @prop enabled: boolean as to whether button is enabled\n */\nclass AddRemNeighborsBtn extends Component {\n    render() {\n        const { enabled } = this.props;\n        const btnSize = \"md\";\n        if (enabled) {\n            return (\n                <ButtonGroup toggle>\n                    <Button variant=\"warning\" size={btnSize}\n                        onClick={this.props.addPrecinctNeighbor}>Add Neighborship\n                    </Button>\n                    <Button variant=\"danger\" size={btnSize}\n                        onClick={this.props.removePrecinctNeighbor}>Remove Neighborship\n                    </Button>\n                </ButtonGroup>\n            )\n        }\n        else {\n            return (<></>)\n        }\n    }\n}\n\nexport default AddRemNeighborsBtn;","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport MapGL, {\n    Popup,\n    NavigationControl,\n    FullscreenControl,\n    ScaleControl,\n    Source,\n    Layer,\n    LinearInterpolator,\n    WebMercatorViewport,\n} from \"react-map-gl\";\nimport { Nav, Navbar, Form } from \"react-bootstrap\";\nimport { json } from \"d3-request\";\nimport bbox from \"@turf/bbox\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { GeoJsonLayer } from \"@deck.gl/layers\";\nimport Geocoder from \"react-map-gl-geocoder\";\nimport { Editor, EditorModes } from \"react-map-gl-draw\";\n\n/**\n * JS classes\n */\nimport AppData from \"../data/AppData\";\n\n/**\n * CSS Styling\n */\nimport \"../App.css\";\nimport \"../styles/Collapsible.css\";\nimport \"../styles/PinPopup.css\";\nimport \"../static/app.css\";\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport Card from \"react-bootstrap/Card\";\n\n/**\n * Map layers\n */\nimport {\n    countyDataLayerFillable,\n    //countyDataLayerFillableHighlight,\n    countyDataLayerOutline,\n} from \"../layers/CountyLayer\";\nimport {\n    stateLayerFill, stateLayerOutline,\n    //stateLayerFillHighlight\n} from \"../layers/StateLayer\";\nimport {\n    precinctLayerFill,\n    //precinctLayerFillHighlight,\n    precinctLayerOutline,\n} from \"../layers/PrecinctLayer\";\nimport {\n    congressionalLayerFill,\n    //congressionalLayerFillHighlight,\n    congressionalLayerOutline,\n} from \"../layers/CongressionalLayer\";\nimport {\n    nationalParkLayerFill,\n    nationalParkLayerOutline\n} from \"../layers/NationalParkLayer\";\n\n/**\n * Our components\n */\nimport Pins from \"./map/ErrorPins\";\nimport ErrorInfo from \"./map/ErrorModal\";\nimport StateSelector from \"./navbar/StateSelector\";\nimport LeftSidebar from \"./sidebar/LeftSidebar\";\nimport Toolbar from \"./map/toolbar\";\nimport UserModeSelector from \"./navbar/UserModeSelector\";\nimport MergeBtn from \"./navbar/MergeBtn\";\nimport AddRemNeighborsBtn from \"./navbar/AddRemNeighborsBtn\";\n\n/**\n * Static data files\n */\nimport ERRORS from \"../data/errors.json\";\n//import STATES_TOOLTIP_DATA from '../data/states_tooltip_data.geojson';\n//import NY_COUNTY_SHORELINE_DATA from '../data/ny_county_shoreline.geojson';\n//import NY_PRECINCT_DATA from '../data/ny_precincts.geojson';\n//import NY_CONGRESSIONAL_DATA from \"../data//New_York_Congressional_Districts.GeoJSON\";\n// import TESTING_PRECINCT_DATA from './data/GeoJSON_example.geojson';\nimport NY_NATIONAL_PARKS from '../data/nationalparks/New_York_National_Parks.GeoJSON';\nimport WISCONSIN_NATIONAL_PARKS from '../data/nationalparks/Wisconsin_National_Parks.GeoJSON';\nimport UTAH_NATIONAL_PARKS from '../data/nationalparks/Utah_National_Parks.GeoJSON';\n\n/**\n * Mapbox Style & API Key\n */\nconst MAPBOX_STYLE = \"mapbox://styles/shortland/ck7fn4gmu014c1ip60jlumnm2\";\nconst MAPBOX_API =\n    \"pk.eyJ1Ijoic2hvcnRsYW5kIiwiYSI6ImNqeXVzOWhsbjBpYzczY29hNGZycTlqdXAifQ.B6l-uEqGG-Pw6-quz4eflQ\";\n\n/**\n * Main React component which renders everything\n * @state viewport: the maps viewport (lat, long, etc)\n * @state stateData, countyData, congresionalDistrictData, precinctData: hold data loaded from API\n * @state layers: keeps track of which layers should be on (ex: precincts should be displayed when layers.precincts is true)\n */\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stateData: null,\n            countyData: null,\n            countyDataOutline: null,\n            congressionalDistrictData: null,\n            precinctData: null,\n            viewport: {\n                width: \"100%\",\n                height: window.innerHeight,\n                latitude: 37.0902,\n                longitude: -105.7129,\n                zoom: 3.3,\n            },\n            popupInfo: null,\n            selectedFeature: null,\n            selectedPrecinctGroup: [],\n            selectedMode: EditorModes.READ_ONLY,\n            // selectedFeatureId: null,\n            hoveredFeature: null,\n            shouldShowPins: false,\n            features: {},\n            selectedFeatureIndex: null,\n            userMode: \"View\",\n            layers: {\n                states: true,\n                counties: true,\n                congressional: false,\n                precincts: true,\n                parks: false,\n            },\n\n            parksData: null\n        };\n\n        this._editorRef = null;\n        this.showErrorPins = this.showErrorPins.bind(this);\n        this.appData = new AppData();\n\n        this.mapRef = React.createRef();\n    }\n\n    /**\n     * gets the underlying Mapbox GL JS map\n     * be careful calling methods on this map as it may break the React wrapper\n     */\n    getMap() {\n        return this.mapRef.current.getMap()\n    }\n\n    handleViewportChange = (viewport) => {\n        this.setState({\n            viewport: { ...this.state.viewport, ...viewport },\n        });\n    };\n\n    handleGeocoderViewportChange = (viewport) => {\n        const geocoderDefaultOverrides = { transitionDuration: 1000 };\n\n        return this.handleViewportChange({\n            ...viewport,\n            ...geocoderDefaultOverrides,\n        });\n    };\n\n    handleOnResult = (event) => {\n        console.log(event.result);\n        this.setState({\n            searchResultLayer: new GeoJsonLayer({\n                id: \"search-result\",\n                data: event.result.geometry,\n                getFillColor: [255, 0, 0, 128],\n                getRadius: 1000,\n                pointRadiusMinPixels: 10,\n                pointRadiusMaxPixels: 10,\n            }),\n        });\n    };\n    //----------------------- React Map GL Draw--------------------//\n    /**\n     * For React Map Gl Draw\n     */\n    _onDelete = () => {\n        const { selectedFeatureIndex } = this.state;\n        if (selectedFeatureIndex === null || selectedFeatureIndex === undefined) {\n            toast.info(\"Please select a new created precint before deleting action\", {\n                position: toast.POSITION.BOTTOM_RIGHT,\n            });\n            return;\n        } else {\n            toast.info(\"Selected precinct is deleted\", {\n                position: toast.POSITION.BOTTOM_RIGHT,\n            });\n            let features = this.state.features;\n            if (selectedFeatureIndex > -1) {\n                features.data.splice(selectedFeatureIndex, 1);\n            }\n            this.setState({\n                selectedFeatureIndex: null,\n                selectedMode: EditorModes.READ_ONLY,\n                features: features,\n            });\n        }\n        this._editorRef.deleteFeatures(selectedFeatureIndex);\n    };\n\n    _switchMode = (evt) => {\n        let selectedMode = evt.target.id;\n        if (selectedMode === this.state.selectedMode) {\n            selectedMode = null;\n        }\n\n        this.setState({ selectedMode });\n    };\n\n    //Map GL Draw select a feature (a created shape by the MapGLDraw)\n    _onSelect = (selected) => {\n        this.setState({\n            selectedFeatureIndex: selected && selected.selectedFeatureIndex,\n        });\n    };\n    //Map GL Draw update (user draw a new shape)\n    _onUpdate = (features) => {\n        this.setState({\n            features: features,\n            selectedMode: EditorModes.READ_ONLY,\n            selectedFeatureIndex: null,\n        });\n    };\n\n    //toobar save button click event\n    _onSaveRequest = (toolBarRequest) => {\n        if (toolBarRequest) {\n            let selected_saved_feature = this.state.features.data[\n                this.state.selectedFeatureIndex\n            ];\n            console.log(selected_saved_feature);\n            this.setState({\n                selectedMode: EditorModes.READ_ONLY,\n                selectedFeatureIndex: null,\n            });\n            if (selected_saved_feature) {\n                toast.info(\"New precinct is saved\", {\n                    position: toast.POSITION.BOTTOM_RIGHT,\n                });\n            } else {\n                toast.info(\"Please select a new created precint to save\", {\n                    position: toast.POSITION.BOTTOM_RIGHT,\n                });\n            }\n        }\n    };\n\n    _renderToolbar = () => {\n        const { userMode } = this.state;\n        if (userMode === \"Edit\") {\n            // let selectedFeature = this.state.selectedFeature;\n            // if (selectedFeature && selectedFeature.properties.type === \"Precinct\") {\n            //     let oldFeatureForEdit = this.state.featureForEditing;\n            //     let selectedFeatureId = selectedFeature.id;\n            //     let isUpdateStateNeeded = false;\n            //     //check if featureForEdit is the same\n            //     if (oldFeatureForEdit) {\n            //         if (oldFeatureForEdit.id !== selectedFeatureId) {\n            //             isUpdateStateNeeded = true;\n            //         }\n            //     }\n            //     else {\n            //         isUpdateStateNeeded = true;\n            //     }\n\n            //     if (isUpdateStateNeeded) {\n            //         this.appData.fetchPrecinctShape(selectedFeatureId).then((data) => {\n            //             data.features[0].geometry = {\n            //                 type: \"Polygon\",\n            //                 coordinates: data.features[0].geometry.coordinates[0]\n            //             }\n            //             this.setState({\n            //                 featureForEditing: data.features\n            //             });\n            //         });\n            //     }\n            // }\n            // let featureForEditing = this.state.featureForEditing;\n            // let editor = this._editorRef;\n            // //we only use one feature\n            // if (featureForEditing) {\n            //     //check if editor's featureCollection exist or not\n            //     if (editor.state.featureCollection) {\n            //         if (editor.state.featureCollection.featureCollection.length !== 1) {\n            //             editor.state.featureCollection.featureCollection.length = 0;\n            //             //editor.addFeatures(featureForEditing);\n            //         }\n            //     }\n            //     else {\n            //         editor.addFeatures(featureForEditing);\n            //     }\n            // }\n            // else {\n            //     //console.log(editor);\n            // }\n\n            return (\n                <Toolbar\n                    selectedMode={this.state.selectedMode}\n                    onSwitchMode={this._switchMode}\n                    onDelete={this._onDelete}\n                    onSelect={this._onSelect}\n                    features={this.state.features}\n                    selectedFeature={this.state.selectedFeature}\n                    toolBarRequest={this._onSaveRequest}\n                    appData={this.appData}\n                />\n            );\n        } else {\n            return;\n        }\n    };\n\n    /**\n     * Here can load anything based on the state feature selected\n     * such as congressional districts or national parks by state\n     * \n     * state.selectedFeature is set within here\n     */\n    onStateSelected(stateFeature) {\n        // const { layers } = this.state;\n        console.log(stateFeature.properties)\n        let stateID = stateFeature.properties.id;\n\n        if (stateFeature.properties.name === \"Wisconsin\") {\n            this.loadWisconsinParks();\n        }\n        else if (stateFeature.properties.name === \"New York\") {\n            this.loadNyParks();\n        }\n        else if (stateFeature.properties.name === \"Utah\") {\n            this.loadUtahParks();\n        }\n\n        this.appData.fetchCongressionalDistrictByState(stateID).then((data) => {\n            //console.log(data)\n            this.setState({\n                congressionalDistrictData: data\n            });\n        });\n\n        this.appData.fetchCountiesByState(stateID).then((data) => {\n            //console.log(data)\n            this.setState({\n                countyData: data\n            });\n        });\n\n        this.setState({ selectedFeature: stateFeature });\n    }\n\n    /**\n     * any operations when a county is selected can go here\n     * \n     * sets state.selectedFeature to be the county feature passed\n     */\n    onCountySelected(countyFeature) {\n        //console.log(countyFeature.properties)\n        let countyId = countyFeature.properties.id;\n\n        this.appData.fetchShapeOfPrecinctsByCounty(countyId).then((data) => {\n            console.log(data)\n            this.setState({\n                precinctData: data\n            });\n        });\n\n        this.setState({ selectedFeature: countyFeature });\n    }\n\n    /**\n     * when detected a precinct is being hovered on\n     */\n    onPrecinctHover(precinctFeature, event) {\n        const shiftKey = event.srcEvent.shiftKey;\n        const { selectedFeature } = this.state;\n        if (shiftKey && selectedFeature.type === \"Precinct\") {\n            precinctFeature.multiSelecting = true;\n        }\n        else {\n            precinctFeature.multiSelecting = false;\n        }\n    }\n\n    /**\n     * any operations for when a precinct is selected can go here\n     * \n     * sets state.selectedFeature as the precinct passed\n     */\n    onPrecinctSelected(precinctFeature, selectingMultiple) {\n        const precinctId = precinctFeature.properties.id;\n        const prevSelected = this.state.selectedFeature;\n\n        this.appData.fetchPrecinctInfo(precinctId).then((data) => {\n            let oldData = precinctFeature;\n            let neighborsStrId = [];\n            for (let i in data.neighborsId) {\n                neighborsStrId.push(data.neighborsId[i].toString().trim());\n            }\n            let info = {\n                \"demographicData\": data.demographicData,\n                \"fullName\": data.fullName,\n                \"id\": data.id,\n                \"isGhost\": data.isGhost,\n                \"parentId\": data.parentDistrictId,\n                \"precinctError\": data.precinctErrors,\n                \"votingData\": data.votingData\n            }\n            if (oldData.properties.neighborsId === undefined) {\n                info = {\n                    ...info,\n                    \"neighborsId\": neighborsStrId\n                }\n            }\n            let newProp = Object.assign(oldData.properties, info);\n            oldData.properties = newProp;\n            return oldData;\n        }).then((updatedPrecinct) => {\n            if (selectingMultiple) {\n                //shift key was pressed, add for multi select\n                this.addPrecinctToGroup(updatedPrecinct);\n                //console.log(this.state.selectedPrecinctGroup);\n            }\n            else {\n                //remove highlights\n                this.removeSelectedHighlight(prevSelected);\n                this.removeHighlightPrecinctNeighbors(prevSelected);\n                //remove highlights from group\n                this.clearPrecinctGroup();\n                this.addSelectedHighlight(updatedPrecinct);\n                this.highlightPrecinctNeighbors(updatedPrecinct);\n                //Add highlights\n                this.setState({\n                    selectedFeature: updatedPrecinct\n                });\n            }\n        });\n    }\n\n    /**\n     * For multi-selection of precincts with shift+click\n     * Since selecting multiple, just keeps state.selectedFeature as the first selected\n     * @param {*} precinctFeature precinct to add to the group of selected\n     */\n    addPrecinctToGroup(precinctFeature) {\n        const group = this.state.selectedPrecinctGroup;\n        if (group.length === 0) {\n            const prevSelected = this.state.selectedFeature;\n            group.push(prevSelected); //push first selected\n            group.push(precinctFeature); //push the second selected\n        }\n        else if (group.length === 1) {\n            group.push(precinctFeature);\n        }\n        else {\n            toast.warn(\"Can only add 2 precincts to a group\",\n                {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                });\n            return;\n        }\n        console.log(group);\n        this.addSelectedHighlight(precinctFeature);\n        this.setState({ selectedPrecinctGroup: group });\n    }\n\n    /**\n     * clears the group of selected precincts\n     */\n    clearPrecinctGroup() {\n        const group = this.state.selectedPrecinctGroup;\n        while (group.length != 0) {\n            this.removeSelectedHighlight(group.pop());\n        }\n        this.setState({ selectedPrecinctGroup: group });\n    }\n\n    /**\n     * will set state.selectedFeature to the feature clicked\n     * each feature type has it's own onSelected method which is called (state.selectedFeature is set in there)\n     */\n    _onClick = (event) => {\n        const { features } = event;\n        //console.log(features)\n        if (features) {\n            const stateFeature = features.find((f) => f.layer.id === \"stateFill\");\n            const countyFeature = features.find((f) => f.layer.id === \"countyFill\");\n            const congressionalFeature = features.find((f) => f.layer.id === \"congressionalFill\");\n            const precinctFeature = features.find((f) => f.layer.id === \"precinctFill\");\n\n            const selectedFeature = stateFeature || countyFeature || congressionalFeature || precinctFeature;\n            const previouslySelected = this.state.selectedFeature;\n\n            //console.log(event);\n            //console.log(event.srcEvent.shiftKey);\n\n            if (stateFeature) {\n                stateFeature.properties.type = \"State\";\n                //console.log(stateFeature)\n                // if a clicks on a state that was already selected/clicked on\n                if (this.state.selectedFeature) {\n                    if (stateFeature.properties.name === this.state.selectedFeature.properties.name) {\n                        this._zoomToFeature(event);\n                        return;\n                    }\n                } else {\n                    toast.info(\n                        \"Click the same feature (state/county) again to zoom in.\",\n                        {\n                            position: toast.POSITION.BOTTOM_RIGHT,\n                        }\n                    );\n                }\n                this.onStateSelected(stateFeature);\n            }\n            else if (countyFeature) {\n                countyFeature.properties.type = \"County\";\n                // if a clicks on a county that was already selected/clicked on\n                if (this.state.selectedFeature) {\n                    if (countyFeature.properties.name === this.state.selectedFeature.properties.name) {\n                        this._zoomToFeature(event);\n                        return;\n                    }\n                }\n                this.onCountySelected(countyFeature);\n            }\n            else if (congressionalFeature) {\n                congressionalFeature.properties.type = \"Congressional District\";\n                this.setState({ selectedFeature: congressionalFeature });\n            }\n            else if (precinctFeature) {\n                precinctFeature.properties.type = \"Precinct\";\n                //call on precinct selected, passing shift key pressed to check if selecting multiple\n                this.onPrecinctSelected(precinctFeature, event.srcEvent.shiftKey);\n                //check if precinct_selection_to_edit is true\n                // if (this.state.precinct_selection_to_edit) {\n                //     //add the selected precinct to precinct_selected_for_edit\n                //     this.setState({\n                //         precinct_selected_for_edit: precinctFeature.id\n                //     });\n                //     //TODO: enable user to select multiple precicnts so this should also highlight all the selected precincts\n                // }\n                // else {\n                //     this.onPrecinctSelected(precinctFeature);\n                // }\n\n                //handle everything for precinct selected in above methods, then return\n                return;\n            }\n            else {\n                if (previouslySelected && previouslySelected.properties.type === \"Precinct\") {\n                    this.removeHighlightPrecinctNeighbors(previouslySelected);\n                }\n\n                this.setState({ selectedFeature: null })\n            }\n            this.removeSelectedHighlight(previouslySelected);\n            this.addSelectedHighlight(selectedFeature);\n        }\n    };\n\n    _zoomToFeature(event) {\n        const feature = event.features[0];\n\n        if (!feature) {\n            return;\n        }\n\n        if (feature.layer.id === \"stateFill\" || feature.layer.id === \"countyFill\") {\n            const [minLng, minLat, maxLng, maxLat] = bbox(feature);\n            const viewport = new WebMercatorViewport(this.state.viewport);\n            const { longitude, latitude, zoom } = viewport.fitBounds(\n                [\n                    [minLng, minLat],\n                    [maxLng, maxLat],\n                ],\n                {\n                    padding: 40,\n                }\n            );\n\n            this.setState({\n                viewport: {\n                    ...this.state.viewport,\n                    longitude,\n                    latitude,\n                    zoom,\n                    transitionInterpolator: new LinearInterpolator({\n                        around: [event.offsetCenter.x, event.offsetCenter.y],\n                    }),\n                    transitionDuration: 1000,\n                },\n            });\n            return;\n        }\n    }\n\n    _onHover = (event) => {\n        const map = this.mapRef.current.getMap();\n        const {\n            features,\n            srcEvent: { x, y },\n        } = event;\n\n        //console.log(event.srcEvent.shiftKey);\n\n        if (!event.type || !event.features || event.features.length === 0 || event.features[0].source === \"composite\") {\n            const lastHovered = this.state.hoveredFeature;\n            if (lastHovered && lastHovered.id) {\n                map.setFeatureState(\n                    { source: lastHovered.source, id: lastHovered.id },\n                    { hover: false }\n                );\n            }\n            this.setState({\n                hoveredFeature: null\n            });\n            return;\n        }\n\n        // prevent hovering on pin making the tooltip show at top left of map\n        if (x !== 0 && y !== 0) {\n            this.setState({ x: x, y: y });\n        }\n\n        if (features) {\n            const stateHovered = features.find((f) => f.layer.id === \"stateFill\");\n            const countyHovered = features.find((f) => f.layer.id === \"countyFill\");\n            const congressionalHovered = features.find((f) => f.layer.id === \"congressionalFill\");\n            const precinctHovered = features.find((f) => f.layer.id === \"precinctFill\");\n\n            const hovered = stateHovered || countyHovered || congressionalHovered || precinctHovered;\n            const lastHovered = this.state.hoveredFeature;\n\n            //console.log(hovered);\n\n            //set highlight on hover\n            if (hovered) {\n                map.setFeatureState(\n                    { source: hovered.source, id: hovered.id },\n                    { hover: true }\n                );\n            }\n\n            if (stateHovered) {\n                hovered.isState = true;\n            } else if (countyHovered) {\n                hovered.isCounty = true;\n            } else if (congressionalHovered) {\n                hovered.isCongressional = true;\n            } else if (precinctHovered) {\n                hovered.isPrecinct = true;\n                this.onPrecinctHover(precinctHovered, event);\n                //this.highlightPrecinctNeighbors(precinctHovered);\n            }\n\n            //if changed hovered features, remove highlight from previous\n            if (lastHovered && hovered && hovered.id && lastHovered.id != hovered.id) {\n                map.setFeatureState(\n                    { source: lastHovered.source, id: lastHovered.id },\n                    { hover: false }\n                );\n            }\n            this.setState({\n                hoveredFeature: hovered\n            });\n        }\n    };\n\n    addHoveredHighlight(feature) {\n        const map = this.mapRef.current.getMap();\n        if (feature && feature.id && feature.source) {\n            map.setFeatureState(\n                { source: feature.source, id: feature.id },\n                { hover: true }\n            );\n        }\n    }\n\n    addSelectedHighlight(feature) {\n        const map = this.mapRef.current.getMap();\n        if (feature && feature.id && feature.source) {\n            map.setFeatureState(\n                { source: feature.source, id: feature.id },\n                { selected: true }\n            );\n        }\n    }\n\n    async removeSelectedHighlight(feature) {\n        const map = this.mapRef.current.getMap();\n        if (feature && feature.id && feature.source) {\n            map.setFeatureState(\n                { source: feature.source, id: feature.id },\n                { selected: false }\n            );\n        }\n    }\n\n    /**\n     * will set precicnt's neighbors' styling\n     * @param {*} precinctFeature the precinct whose neighbors to highlight\n     */\n    highlightPrecinctNeighbors(precinctFeature) {\n        console.log(precinctFeature);\n        const map = this.mapRef.current.getMap()\n        const neighbors = precinctFeature.properties.neighborsId || false;\n        const source = precinctFeature.source;\n\n        if (neighbors && source) {\n            // for (let index = 0; index < neighbors.length; index++) {\n            //     let Nid = neighbors[index].toString().trim();\n            //     console.log(Nid, index);\n            //     map.setFeatureState(\n            //         { source: source, id: Nid },\n            //         { neighbor: true }\n            //     );\n            // }\n            //console.log(\"hihglighNeiggh\", neighbors);\n            for (let index in neighbors) {\n                let Nid = neighbors[index].toString().trim();\n                //console.log(Nid, index);\n                map.setFeatureState(\n                    { source: source, id: Nid },\n                    { neighbor: true }\n                );\n            }\n        }\n    }\n\n    /**\n     * removes neighbors styling, for when new precinct selected\n     * @param {*} precinctFeature the precicnt to remove neighbors' highlighting\n     */\n    async removeHighlightPrecinctNeighbors(precinctFeature) {\n        console.log(precinctFeature);\n        if (precinctFeature) {\n            const map = this.mapRef.current.getMap()\n            const neighbors = precinctFeature.properties.neighborsId || false;\n            const source = precinctFeature.source;\n            console.log(\"removeNeighbors\", neighbors)\n            if (neighbors && source) {\n                for (let index in neighbors) {\n                    let Nid = neighbors[index].toString().trim();\n                    //console.log(Nid);\n                    map.setFeatureState(\n                        { source: source, id: Nid },\n                        { neighbor: false }\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * renders the on hover tooltip\n     */\n    _renderTooltip() {\n        const { hoveredFeature, x, y, selectedFeature } = this.state;\n\n        if (!hoveredFeature) {\n            return;\n        } else if (hoveredFeature.isState) {\n            const stateHovered = hoveredFeature;\n            return (\n                hoveredFeature && (\n                    <div className=\"state-tooltip\" style={{ left: x, top: y }}>\n                        <h5>{stateHovered.properties.name}</h5>\n                        {/* <div>\n                            Counties:{\" \"}\n                            {}\n                        </div> */}\n                        {/* <br /> */}\n                        {/* <div style={{ \"fontStyle\": \"italic\" }}>(click again to enlarge)</div> */}\n                    </div>\n                )\n            );\n        } else if (hoveredFeature.isCounty) {\n            const countyHovered = hoveredFeature;\n            return (\n                countyHovered && (\n                    <div className=\"state-tooltip\" style={{ left: x, top: y }}>\n                        <h5>{countyHovered.properties.name}</h5>\n                        {/* <div>FIPS Code: {countyHovered.properties.FIPS_CODE}</div> */}\n                        {/* <br /> */}\n                        {/* <div style={{ \"fontStyle\": \"italic\" }}>(click again to enlarge)</div> */}\n                    </div>\n                )\n            );\n        } else if (hoveredFeature.isCongressional) {\n            const congressionalHovered = hoveredFeature;\n            return (\n                congressionalHovered && (\n                    <div className=\"state-tooltip\" style={{ left: x, top: y }}>\n                        <h5>{congressionalHovered.properties.name}</h5>\n                        <div></div>\n                        {/* <br /> */}\n                        <div style={{ \"fontStyle\": \"italic\" }}>click to load precincts for county</div>\n                    </div>\n                )\n            );\n        } else if (hoveredFeature.isPrecinct) {\n            const precinctHovered = hoveredFeature;\n            return (\n                precinctHovered && (\n                    <div className=\"state-tooltip\" style={{ left: x, top: y }}>\n                        <h6>Precinct id: {precinctHovered.properties.id}</h6>\n                        {(() => {\n                            if (selectedFeature) {\n                                if (precinctHovered.id === selectedFeature.id) {\n                                    return <div style={{ \"fontStyle\": \"italic\" }}>this precicnt is currently selected</div>;\n                                }\n                                else if (precinctHovered.multiSelecting) {\n                                    return <div style={{ \"fontStyle\": \"italic\" }}>add this to group?</div>;\n                                }\n                                else if (selectedFeature.properties.type === \"Precinct\") {\n                                    return <div style={{ \"fontStyle\": \"italic\" }}>shift+click to add to selection</div>;\n                                }\n                            }\n                        })()}\n                    </div>\n                )\n            );\n        }\n    }\n\n    userModeSelect = (userMode) => {\n        if (userMode) {\n            this.setState({ userMode: userMode });\n        }\n\n        if (userMode !== \"Edit\") {\n            this.setState({\n                precinct_selection_to_edit: false,\n                precinct_selected_for_edit: null\n            });\n        }\n        else {\n            this.setState({\n                precinct_selection_to_edit: true\n            });\n        }\n    };\n\n    stateSelect(name) {\n        let latitude = 0;\n        let longitude = 0;\n        let zoom = 6;\n        switch (name) {\n            case \"New York\":\n            case \"NY\":\n                latitude = 43.2994;\n                longitude = -76.2179;\n                break;\n            case \"Wisconsin\":\n            case \"WI\":\n                latitude = 44.7844;\n                longitude = -89.7879;\n                break;\n            case \"Utah\":\n            case \"UT\":\n                latitude = 39.321;\n                longitude = -112.0937;\n                break;\n            default:\n        }\n\n        this.setState({\n            viewport: {\n                ...this.state.viewport,\n                latitude: latitude,\n                longitude: longitude,\n                zoom: zoom,\n            },\n        });\n    }\n\n    /**\n     * Rendering error pins on the map & its popup\n     */\n    _onClickError = (error_data) => {\n        this.setState({ popupInfo: error_data });\n        console.log(error_data);\n        this.setState({\n            viewport: {\n                ...this.state.viewport,\n                longitude: error_data.longitude,\n                latitude: error_data.latitude,\n                transitionDuration: 1000,\n                zoom: 11,\n            },\n        });\n    };\n\n    _renderErrorPopup() {\n        const { popupInfo } = this.state;\n\n        return (\n            popupInfo && (\n                <Popup\n                    tipSize={5}\n                    anchor=\"top\"\n                    longitude={popupInfo.longitude}\n                    latitude={popupInfo.latitude}\n                    closeOnClick={false}\n                    onClose={() => this.setState({ popupInfo: null })}\n                >\n                    <ErrorInfo info={popupInfo} />\n                </Popup>\n            )\n        );\n    }\n\n    showErrorPins() {\n        const { shouldShowPins } = this.state;\n        if (shouldShowPins) {\n            this.setState({\n                shouldShowPins: false,\n            });\n        } else {\n            this.setState({\n                shouldShowPins: true,\n            });\n        }\n    }\n\n    /**\n     * getting all the error and pass the error to LeftSideBar -> MapError\n     */\n    getAllErrors() {\n        this.appData.fetchAllPrecinctError().then((data) => {\n            console.log(data);\n            let errorMap = {};\n            for (let i in data) {\n                let precinctId = data[i].precinctId;\n                if (precinctId) {\n                    errorMap[precinctId] = data[i];\n                }\n            }\n            this.setState({\n                //errorPrecinctId: precinctId,\n                allErrors: data\n            });\n        });\n    }\n\n    errorListOnClick = (errorData) => {\n        console.log(errorData);\n        let id = errorData.precinctId;\n        if (id) {\n            let stateId = id.slice(0, 2);\n            let countyId = id.slice(0, 5);\n            let map = this.getMap();\n            this.appData.fetchPrecinctShape(id).then((data) => {\n                let geo = data.features[0].geometry;\n                console.log(geo);\n                let oneArray = geo.coordinates[0][0][0];\n                let f = map.queryRenderedFeatures(oneArray, { layers: \"PrecinctFill\" });\n                console.log(data);\n                console.log(f);\n            });\n        }\n    }\n\n    /**\n     * This is called after everything is rendered to DOM\n     * Good place for API calls\n     */\n    componentDidMount() {\n        /**\n         * Get all the states\n         */\n        this.appData.fetchAllStates().then((data) => {\n            console.log(data.featureCollection);\n            this.setState({\n                stateData: data.featureCollection,\n            });\n        });\n\n        this.getAllErrors();\n\n        //this.appData.fetchAllPrecinctError();\n    }\n\n    /**\n     * Render state data\n     */\n    renderStateLayers() {\n        const { layers, stateData } = this.state;\n\n        return (\n            <>\n                {layers.states && (\n                    <Source type=\"geojson\" data={stateData}>\n                        <Layer {...stateLayerFill} maxzoom={5.5} />\n                        <Layer {...stateLayerOutline} maxzoom={5.5} />\n                    </Source>\n                )}\n            </>\n        );\n    }\n\n    renderNationalParks() {\n        const { layers, parksData } = this.state;\n        return (\n            <>\n                {layers.parks && (\n                    <>\n                        <Source type=\"geojson\" data={parksData}>\n                            <Layer {...nationalParkLayerFill} />\n                            <Layer {...nationalParkLayerOutline} />\n                        </Source>\n                    </>\n                )}\n            </>\n        )\n    }\n\n    /**\n     * Render congressional data\n     */\n    renderCongressionalLayers() {\n        const { layers, congressionalDistrictData } = this.state;\n        // console.log(congressionalDistrictData)\n        return (\n            <>\n                {layers.congressional && (\n                    <Source type=\"geojson\" data={congressionalDistrictData}>\n                        <Layer {...congressionalLayerFill} minzoom={5} />\n                        <Layer {...congressionalLayerOutline} minzoom={5} />\n                    </Source>\n                )}\n            </>\n        );\n    }\n\n    renderCountyLayers() {\n        const { layers, countyData, selectedFeature } = this.state;\n        return (\n            <>\n                {layers.counties && (\n                    <Source type=\"geojson\" data={countyData}>\n                        <Layer {...countyDataLayerOutline} minzoom={5.5} />\n                        <Layer {...countyDataLayerFillable} minzoom={5.5}\n                            maxzoom={(() => {\n                                if (selectedFeature && selectedFeature.properties.type === \"Precinct\") {\n                                    return 7.5;\n                                }\n                                else {\n                                    return 9;\n                                }\n                            })()} />\n                    </Source>\n                )}\n            </>\n        );\n    }\n\n    /**\n     * Render precinct data\n     */\n    renderPrecinctLayers() {\n        const { layers, precinctData } = this.state;\n        //console.log(layers.precincts, precinctData)\n        return (\n            <>\n                {layers.precincts && (\n                    <Source type=\"geojson\" data={precinctData}>\n                        <Layer {...precinctLayerOutline} minzoom={7} />\n                        <Layer {...precinctLayerFill} minzoom={7} />\n                    </Source>\n                )}\n            </>\n        );\n    }\n\n    /**\n     * just checks if current selected feature is a precinct\n     */\n    precinctIsSelected() {\n        const selected = this.state.selectedFeature;\n        if (selected && selected.properties.type && selected.properties.type === \"Precinct\") {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    render() {\n        const { viewport, selectedMode, shouldShowPins } = this.state;\n        //console.log(\"testing for leftSideBar\\n\", this.state.selectedFeature)\n        return (\n            <div className=\"App\">\n                <div className=\"selectStateItem inlineDivs\">\n                    <StateSelector\n                        select_state={(state_abv) => this.stateSelect.bind(this, state_abv)}\n                    />\n                </div>\n                {/* <div className=\"toggleModeItem inlineDivs\">\n                    <UserModeSelector\n                        userModeSelect={(selectedMode) => this.userModeSelect(selectedMode)}\n                        selectedFeature={this.state.selectedFeature}\n                    />\n                </div> */}\n                {this.precinctIsSelected() &&\n                    <div className=\"precinctBtns\">\n                        <div className=\"mergeBtn inlineDivs\">\n                            <MergeBtn\n                                mergePrecincts={() => this.mergePrecincts()}\n                                enabled={this.state.selectedPrecinctGroup.length >= 2}\n                            />\n                        </div>\n\n                        <div className=\"addRemBtn inlineDivs\">\n                            <AddRemNeighborsBtn\n                                //mergePrecincts={() => this.mergePrecincts()}\n                                addPrecinctNeighbor={() => this.addPrecinctNeighbor()}\n                                removePrecinctNeighbor={() => this.removePrecinctNeighbor()}\n                                enabled={this.state.selectedPrecinctGroup.length >= 2}\n                            />\n                        </div>\n                    </div>\n                }\n\n                <div>\n                    <div id=\"leftCol\">\n                        <LeftSidebar\n                            selected={this.state.selectedFeature}\n                            showErrorPins={this.showErrorPins.bind(this)}\n                            userMode={this.state.userMode}\n                            leftSideBarStatus={this.get_leftSideBar_status}\n                            precinctSelectedForEdit={this.state.precinct_selected_for_edit}\n                            appData={this.appData}\n                            allErrors={this.state.allErrors}\n                            errorListOnClick={this.errorListOnClick}\n                        />\n                    </div>\n\n                    <MapGL\n                        {...viewport}\n                        onViewportChange={(viewport) =>\n                            this.setState({ viewport: viewport })\n                        }\n                        mapStyle={MAPBOX_STYLE}\n                        mapboxApiAccessToken={MAPBOX_API}\n                        onHover={this._onHover}\n                        onClick={this._onClick}\n                        doubleClickZoom={false}\n                        ref={this.mapRef}\n                    >\n                        <div\n                            id=\"map-checkboxes\"\n                            style={{\n                                position: \"absolute\",\n                                textAlign: \"left\",\n                                fontSize: \"10pt\",\n                                top: \"10%\",\n                                right: \"10px\",\n                            }}\n                        >\n                            {this._renderCheckboxes()}\n                        </div>\n\n                        <Editor\n                            ref={(_) => (this._editorRef = _)}\n                            clickRadius={12}\n                            onSelect={(selected) => this._onSelect(selected)}\n                            onUpdate={(features) => this._onUpdate(features)}\n                            mode={selectedMode}\n                        />\n\n                        {/* Geocoder - enables searching on the map */}\n                        <Geocoder\n                            mapRef={this.mapRef}\n                            onResult={this.handleOnResult}\n                            onViewportChange={this.handleGeocoderViewportChange}\n                            mapboxApiAccessToken={MAPBOX_API}\n                            position=\"top-right\"\n                        />\n                        {/* This is used alongside the Geocoder... \n                            But apparently it doesn't need to be here for the geocoder to work?\n                            I commented it out - because it mysteriously breaks the Editor...\n                         */}\n                        {/* <DeckGL {...viewport} layers={[searchResultLayer]} /> */}\n\n                        {/* For rendering the controls at top left of the map */}\n                        <div className=\"FullScreenController MapControllers\">\n                            <FullscreenControl />\n                        </div>\n                        <div className=\"NavigationController MapControllers\">\n                            <NavigationControl />\n                        </div>\n                        <div className=\"ScaleController MapControllers\">\n                            <ScaleControl />\n                        </div>\n\n                        {/* {this.renderLayers()} */}\n\n                        {this.renderStateLayers()}\n\n                        {this.renderNationalParks()}\n\n                        {this.renderCountyLayers()}\n\n                        {this.renderCongressionalLayers()}\n\n                        {this.renderPrecinctLayers()}\n\n                        {this._renderTooltip()}\n\n                        {this._renderToolbar()}\n\n                        {/* For rendering pins over our map */}\n                        <Pins\n                            data={ERRORS}\n                            onClick={this._onClickError}\n                            shouldShowPins={shouldShowPins}\n                            appData={this.appData}\n                            mapRef={this.mapRef}\n                        />\n                        {this._renderErrorPopup()}\n                    </MapGL>\n                </div>\n\n                <ToastContainer />\n            </div>\n        );\n    }\n\n    /**\n     * will add the two selected features as neighbors\n     */\n    addPrecinctNeighbor = () => {\n        console.log(\"add precinct neighbors call made\");\n        const { selectedPrecinctGroup } = this.state;\n        if (selectedPrecinctGroup.length === 2) {\n            const precinct1 = selectedPrecinctGroup.pop();\n            const precinct2 = selectedPrecinctGroup.pop();\n            //TODO deal with merge\n            const result = this.appData.addPrecinctNeighbor(precinct1.id, precinct2.id).then((response) => {\n                console.log(\"add neighbors call made\");\n                console.log(response);\n                let r1 = this.fetchAndUpdatePrecinct(precinct1)\n                let r2 = this.fetchAndUpdatePrecinct(precinct2);\n                return r1 && r2;\n            });\n\n            if (result) {\n                toast.success(\"Precincts added as neighbors\", {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                });\n            }\n            else {\n                toast.error(\"Could not add neighborship\", {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                });\n            }\n            //this.removeSelectedHighlight(precinct1.id);\n            this.removeSelectedHighlight(precinct1);\n            this.removeHighlightPrecinctNeighbors(precinct1);\n            this.highlightPrecinctNeighbors(precinct2);\n        }\n    }\n\n    /**\n     * \n     */\n    removePrecinctNeighbor = () => {\n        const { selectedPrecinctGroup } = this.state;\n\n    }\n\n    mergePrecincts = () => {\n        const { selectedPrecinctGroup } = this.state;\n        if (selectedPrecinctGroup.length === 2) {\n            const precinct1 = selectedPrecinctGroup.pop();\n            const precinct2 = selectedPrecinctGroup.pop();\n            //TODO deal with merge\n            const result = this.appData.mergePrecinct(precinct1, precinct2);\n            //merge response\n            if (result) {\n                toast.success(\"Precincts merged\", {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                });\n            }\n            else {\n                toast.error(\"Could not merge\", {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                });\n            }\n            this.removeSelectedHighlight(precinct1);\n            this.removeSelectedHighlight(precinct2);\n        }\n    }\n\n    /**\n     * method to fetch precinct info, parse, then update on frontend\n     * @param {*} precinctFeature \n     */\n    fetchAndUpdatePrecinct(precinctFeature) {\n        console.log(\"fetch and update called\");\n        console.log(precinctFeature);\n        const precinctId = precinctFeature.properties.id;\n\n        const updated = this.appData.fetchPrecinctInfo(precinctId).then((data) => {\n            let oldData = precinctFeature;\n            let neighborsStrId = [];\n            for (let i in data.neighborsId) {\n                neighborsStrId.push(data.neighborsId[i].toString().trim());\n            }\n            let info = {\n                \"demographicData\": data.demographicData,\n                \"fullName\": data.fullName,\n                \"id\": data.id,\n                \"isGhost\": data.isGhost,\n                \"parentId\": data.parentDistrictId,\n                \"precinctError\": data.precinctErrors,\n                \"votingData\": data.votingData\n            }\n            if (oldData.properties.neighborsId === undefined) {\n                info = {\n                    ...info,\n                    \"neighborsId\": neighborsStrId\n                }\n            }\n            let newProp = Object.assign(oldData.properties, info);\n            oldData.properties = newProp;\n            return oldData;\n        }).then((updatedPrecinct) => {\n            console.log(updatedPrecinct);\n            this.forceUpdate();\n            return updatedPrecinct;\n        });\n    }\n\n    /**\n     * toggles whether a layer is displayed\n     */\n    toggleLayer = (layer, e) => {\n        e.stopPropagation();\n        const { layers } = this.state;\n        switch (layer) {\n            case \"States\":\n                layers.states = !layers.states;\n                break;\n            case \"Counties\":\n                layers.counties = !layers.counties;\n                break;\n            case \"Congressional Districts\":\n                layers.congressional = !layers.congressional;\n                break;\n            case \"Precincts\":\n                layers.precincts = !layers.precincts;\n                break;\n            case \"National Parks\":\n                layers.parks = !layers.parks;\n                break;\n            default:\n        }\n        this.setState({ layers: layers });\n    };\n\n    stopPropogation = (e) => {\n        //console.log(e);\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n    }\n\n    /**\n     * renders layer selection checkboxes\n     */\n    _renderCheckboxes = () => {\n        return (\n            <div>\n                <Card\n                    border=\"secondary\"\n                    style={{ width: \"10rem\", backgroundColor: \"rgba(255,255,255,0.9)\" }}\n                    onMouseOver={(e) => this.stopPropogation(e)}\n                >\n                    <Card.Header>Layers</Card.Header>\n                    <Card.Body>\n                        <Form>\n                            {[\n                                \"States\",\n                                \"Congressional Districts\",\n                                \"Counties\",\n                                \"Precincts\",\n                                \"National Parks\",\n                            ].map((name) => (\n                                <div key={\"checkbox-\".concat(name)}>\n                                    <Form.Check\n                                        label={name}\n                                        type={\"checkbox\"}\n                                        defaultChecked={name != \"Congressional Districts\"\n                                            && name != \"National Parks\" ? true : false}\n                                        onClick={(e) => this.toggleLayer(name, e)}\n                                    />\n                                </div>\n                            ))}\n                        </Form>\n                    </Card.Body>\n                    <Card.Footer style={{ lineHeight: \"1.0\" }}>\n                        <small className=\"text-muted\">\n                            Note: some layers will only show at certain zoom levels\n                        </small>\n                    </Card.Footer>\n                </Card>\n            </div>\n        );\n    }\n\n    loadNyParks() {\n        json(\n            NY_NATIONAL_PARKS,\n            (error, response) => {\n                if (!error) {\n                    //this.appendParks(response);\n                    this.setState({ parksData: response });\n                }\n            }\n        );\n    }\n\n    loadUtahParks() {\n        json(\n            UTAH_NATIONAL_PARKS,\n            (error, response) => {\n                if (!error) {\n                    //this.appendParks(response);\n                    this.setState({ parksData: response });\n                }\n            }\n        );\n    }\n\n    loadWisconsinParks() {\n        json(\n            WISCONSIN_NATIONAL_PARKS,\n            (error, response) => {\n                if (!error) {\n                    //this.appendParks(response);\n                    this.setState({ parksData: response });\n                }\n            }\n        );\n    }\n}\n\n\n\n\n\nexport function renderToDom(container) {\n    render(<App />, container);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('map'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}